Terra Satellite: 25 Years of Earth Science — User Manual 🌍🛰️
This guide will help you navigate and interact with the Terra Satellite Earth Science Data website. The site is designed to showcase 25 years of data collected by the NASA Terra satellite and its five onboard instruments.

1. Overview
The website is divided into four main sections, accessible via the top navigation bar:

Home: A dynamic introduction featuring a rotatable 3D Earth model and an overview of the mission.

Data: Interactive charts demonstrating long-term trends in global climate data (Temperature, CO 
2
​
  Levels, Ice Coverage, and Vegetation).

Query: A custom form that simulates querying satellite data for a specific date and location.

Impact: Story-driven content explaining how the Terra satellite's data affects real-world issues like climate change, air quality, and biodiversity.

2. Home Section
The Home section features the main title, mission summary, and a dynamic 3D Earth visualization.

2.1. Interacting with the 3D Earth Model
The stylized globe displays simulated Earth data (like atmospheric and heat overlays).

Rotation: Click and drag (or touch and drag on mobile) the globe to rotate it horizontally and vertically.

Zoom: Use your mouse scroll wheel (or pinch-to-zoom on mobile devices) to zoom in and out of the Earth.

Information Overlay: The "heat-overlay" animation pulsing on the globe visually represents data like rising temperatures or atmospheric CO 
2
​
 .

2.2. Sticky Instrument Navigation
As you scroll down the page, a sticky navigation bar appears at the top. This bar highlights the five major instruments on the Terra satellite.

Instrument	Icon	Primary Role (Simulation)
ASTER	<i class="fas fa-mountain"></i>	High-resolution land surface temperature, emissivity, and elevation.
CERES	<i class="fas fa-cloud-sun"></i>	Measures Earth's radiation budget (solar energy reflected/emitted).
MISR	<i class="fas fa-camera"></i>	Multi-angle imaging to study aerosols, clouds, and surface properties.
MODIS	<i class="fas fa-globe-americas"></i>	Large-scale, moderate-resolution data on the land, atmosphere, and oceans.
MOPITT	<i class="fas fa-smog"></i>	Monitors atmospheric pollution, specifically carbon monoxide (CO) concentrations.

Export to Sheets
Selecting an Instrument: Click on any instrument card. While this action is primarily for demonstration, in a fully functional application, it would filter or load data specific to that instrument.

3. Data Visualization Section
This section displays historical trends derived from Terra and related NASA mission data.

3.1. Viewing Data Charts
Use the four buttons to switch between different long-term visualizations:

Temperature: Shows global temperature anomaly over time.

CO 
2
​
  Levels: Shows the rise in atmospheric CO 
2
​
  (parts per million).

Ice Coverage: Shows the trend in Arctic sea ice extent (million square kilometers).

Vegetation: Shows changes in the Global Vegetation Index (NDVI), indicating planetary "greenness."

Chart Interaction: Hover over the line on any chart to see the specific data value and year.

Timeline: The animated progress bar at the bottom visually represents the timeline of data acquisition from the Terra launch year (1999) up to the present (2024).

4. Custom Data Query Section
Use this tool to simulate requesting specific, localized satellite data for any date from December 18, 1999, to the current date.

4.1. Submitting a Query
Date: Select a date between 1999-12-18 and today.

Location: Enter a geographical location (e.g., "New York, USA").

Latitude/Longitude: Enter the coordinates for the center of your search area.

Latitude: -90 to 90

Longitude: -180 to 180

Dataset: Select one of the available environmental variables (e.g., Temperature, Aerosol Optical Depth, Cloud Properties).

Area Size (km): Enter a radius for the data search (1-100 km).

4.2. Viewing Results
Click the "Query Data" button.

The page will display a Query Results box with simulated data for the selected location, date, and dataset.

Value: The simulated or mock measurement (e.g., temperature in °C, NDVI value).

Unit: The corresponding unit of measurement (e.g., °C, NDVI, g/kg).

Quality: The simulated data quality rating ("Good" in this demo).

Note: Due to API access limitations, the data returned is a highly simplified, often mocked, result to demonstrate functionality, not real-time satellite data.

5. Impact Stories Section
This section provides narrative examples of how Terra's data contributes to scientific understanding and real-world policy.

5.1. Exploring the Impact
Three key impact areas are detailed:

Climate Change & Extreme Weather

Air Quality & Public Health

Ecosystems & Biodiversity

"Learn More" Button: Click the "Learn More" button under any story to open a pop-up window (Modal) with a more detailed explanation of Terra's role in that area.

Closing the Modal: Click the '×' icon in the top right corner or click anywhere outside the pop-up window to close it.







<!DOCTYPE html>

<html lang="en">

<head>

    <meta charset="UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Terra Satellite: 25 Years of Earth Science</title>

    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <style>

        * {

            margin: 0;

            padding: 0;

            box-sizing: border-box;

        }

        

        body {

            font-family: 'Roboto', sans-serif;

            background-color: #0a0e27;

            color: #ffffff;

            overflow-x: hidden;

        }

        

        header {

            padding: 20px 40px;

            background: linear-gradient(90deg, #0a0e27 0%, #1a237e 100%);

            display: flex;

            justify-content: space-between;

            align-items: center;

            position: relative;

            z-index: 100;

        }

        

        .logo {

            display: flex;

            align-items: center;

        }

        

        .logo i {

            font-size: 2rem;

            margin-right: 15px;

            color: #4fc3f7;

        }

        

        .logo h1 {

            font-size: 1.8rem;

            font-weight: 500;

        }

        

        .logo span {

            font-size: 0.9rem;

            color: #90caf9;

            display: block;

        }

        

        nav {

            display: flex;

        }

        

        nav a {

            color: #ffffff;

            text-decoration: none;

            margin: 0 15px;

            padding: 8px 15px;

            border-radius: 20px;

            transition: all 0.3s ease;

        }

        

        nav a:hover, nav a.active {

            background-color: rgba(79, 195, 247, 0.2);

        }

        

        .hero {

            min-height: 100vh;

            position: relative;

            display: flex;

            flex-direction: column;

            justify-content: center;

            align-items: center;

            text-align: center;

            padding: 0 20px 100px;

            background: radial-gradient(ellipse at bottom, #1b2735 0%, #090a0f 100%);

            overflow: hidden;

        }

        

        .stars {

            position: absolute;

            top: 0;

            left: 0;

            width: 100%;

            height: 100%;

            pointer-events: none;

        }

        

        .star {

            position: absolute;

            width: 2px;

            height: 2px;

            background: white;

            border-radius: 50%;

            animation: twinkle 4s infinite;

        }

        

        @keyframes twinkle {

            0%, 100% { opacity: 0.2; }

            50% { opacity: 1; }

        }

        

        .globe-container {

            position: relative;

            width: 500px;

            height: 500px;

            margin: 20px 0;

            perspective: 1000px;

            display: flex;

            justify-content: center;

            align-items: center;

        }

        

        .globe {

            width: 100%;

            height: 100%;

            border-radius: 50%;

            box-shadow: 0 0 50px rgba(79, 195, 247, 0.5), inset -20px -20px 40px rgba(0, 0, 0, 0.5);

            position: relative;

            overflow: hidden;

        }

        

        .globe-overlay {

            position: absolute;

            top: 0;

            left: 0;

            width: 100%;

            height: 100%;

            border-radius: 50%;

            background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.1), transparent 40%);

            pointer-events: none;

        }

        

        .heat-overlay {

            position: absolute;

            top: 0;

            left: 0;

            width: 100%;

            height: 100%;

            border-radius: 50%;

            background: radial-gradient(circle at 70% 50%, rgba(255, 87, 34, 0.4), transparent 60%);

            opacity: 0;

            animation: pulse 4s ease-in-out infinite;

        }

        

        @keyframes pulse {

            0%, 100% { opacity: 0.3; }

            50% { opacity: 0.7; }

        }

        

        .hero-content {

            position: relative;

            z-index: 10;

            max-width: 800px;

        }

        

        .hero h2 {

            font-size: 3rem;

            margin-bottom: 20px;

            font-weight: 700;

            background: linear-gradient(90deg, #4fc3f7, #29b6f6);

            -webkit-background-clip: text;

            background-clip: text;

            color: transparent;

        }

        

        .hero p {

            font-size: 1.2rem;

            margin-bottom: 30px;

            line-height: 1.6;

            color: #b3e5fc;

        }

        

        .btn {

            display: inline-block;

            padding: 12px 30px;

            background: linear-gradient(90deg, #29b6f6, #0288d1);

            color: white;

            text-decoration: none;

            border-radius: 30px;

            font-weight: 500;

            transition: all 0.3s ease;

            border: none;

            cursor: pointer;

            font-size: 1rem;

        }

        

        .btn:hover {

            transform: translateY(-3px);

            box-shadow: 0 10px 20px rgba(41, 182, 246, 0.3);

        }

        

        .data-visualization {

            padding: 80px 20px;

            background: linear-gradient(180deg, #0d47a1 0%, #0a0e27 100%);

            position: relative;

        }

        

        .container {

            max-width: 1200px;

            margin: 0 auto;

        }

        

        .section-title {

            text-align: center;

            margin-bottom: 60px;

        }

        

        .section-title h2 {

            font-size: 2.5rem;

            margin-bottom: 15px;

            color: #4fc3f7;

        }

        

        .section-title p {

            font-size: 1.1rem;

            color: #b3e5fc;

            max-width: 700px;

            margin: 0 auto;

        }

        

        .viz-container {

            display: flex;

            flex-direction: column;

            align-items: center;

            gap: 40px;

        }

        

        .viz-controls {

            display: flex;

            gap: 20px;

            margin-bottom: 20px;

        }

        

        .viz-btn {

            padding: 10px 20px;

            background: rgba(255, 255, 255, 0.1);

            border: 1px solid rgba(79, 195, 247, 0.3);

            color: white;

            border-radius: 25px;

            cursor: pointer;

            transition: all 0.3s ease;

        }

        

        .viz-btn:hover, .viz-btn.active {

            background: rgba(41, 182, 246, 0.3);

            border-color: #29b6f6;

        }

        

        .viz-display {

            width: 100%;

            max-width: 900px;

            height: 400px;

            background: rgba(0, 0, 0, 0.3);

            border-radius: 15px;

            position: relative;

            overflow: hidden;

            border: 1px solid rgba(79, 195, 247, 0.2);

        }

        

        .viz-content {

            width: 100%;

            height: 100%;

            display: none;

            padding: 20px;

        }

        

        .viz-content.active {

            display: block;

        }

        

        .chart-container {

            width: 100%;

            height: 100%;

            position: relative;

        }

        

        .chart {

            width: 100%;

            height: 100%;

        }

        

        .timeline {

            position: relative;

            padding: 20px 0;

            margin-top: 40px;

            width: 100%;

            max-width: 900px;

        }

        

        .timeline-track {

            height: 4px;

            background: rgba(255, 255, 255, 0.1);

            position: relative;

            margin: 40px 0;

        }

        

        .timeline-progress {

            height: 100%;

            width: 0%;

            background: linear-gradient(90deg, #29b6f6, #4fc3f7);

            animation: progress 10s linear infinite;

        }

        

        @keyframes progress {

            0% { width: 0%; }

            100% { width: 100%; }

        }

        

        .timeline-markers {

            display: flex;

            justify-content: space-between;

            position: relative;

            margin-top: -30px;

        }

        

        .timeline-marker {

            text-align: center;

            position: relative;

        }

        

        .timeline-marker::before {

            content: '';

            position: absolute;

            top: -15px;

            left: 50%;

            transform: translateX(-50%);

            width: 10px;

            height: 10px;

            border-radius: 50%;

            background: #4fc3f7;

        }

        

        .timeline-marker span {

            display: block;

            margin-top: 10px;

            font-size: 0.9rem;

            color: #b3e5fc;

        }

        

        .impact-story {

            padding: 80px 20px;

            background: linear-gradient(180deg, #0a0e27 0%, #0d47a1 100%);

            position: relative;

        }

        

        .story-container {

            display: flex;

            flex-wrap: wrap;

            gap: 40px;

            align-items: center;

        }

        

        .story-text {

            flex: 1;

            min-width: 300px;

        }

        

        .story-text h3 {

            font-size: 2rem;

            margin-bottom: 20px;

            color: #4fc3f7;

        }

        

        .story-text p {

            font-size: 1.1rem;

            line-height: 1.6;

            margin-bottom: 20px;

            color: #b3e5fc;

        }

        

        .story-visual {

            flex: 1;

            min-width: 300px;

            height: 400px;

            background: rgba(0, 0, 0, 0.3);

            border-radius: 15px;

            overflow: hidden;

            position: relative;

            border: 1px solid rgba(79, 195, 247, 0.2);

        }

        

        .footer {

            padding: 40px 20px;

            background: #0a0e27;

            text-align: center;

            border-top: 1px solid rgba(79, 195, 247, 0.2);

            position: relative;

        }

        

        .footer p {

            color: #b3e5fc;

            margin-bottom: 20px;

        }

        

        .social-links {

            display: flex;

            justify-content: center;

            gap: 20px;

        }

        

        .social-links a {

            color: #4fc3f7;

            font-size: 1.5rem;

            transition: all 0.3s ease;

        }

        

        .social-links a:hover {

            color: #29b6f6;

            transform: translateY(-3px);

        }

        

        .modal {

            display: none;

            position: fixed;

            top: 0;

            left: 0;

            width: 100%;

            height: 100%;

            background: rgba(0, 0, 0, 0.8);

            z-index: 1000;

            justify-content: center;

            align-items: center;

        }

        

        .modal-content {

            background: linear-gradient(180deg, #0d47a1 0%, #0a0e27 100%);

            border-radius: 15px;

            padding: 30px;

            max-width: 800px;

            width: 90%;

            max-height: 80vh;

            overflow-y: auto;

            position: relative;

            border: 1px solid rgba(79, 195, 247, 0.3);

        }

        

        .close-modal {

            position: absolute;

            top: 15px;

            right: 15px;

            font-size: 1.5rem;

            color: #b3e5fc;

            cursor: pointer;

            transition: all 0.3s ease;

        }

        

        .close-modal:hover {

            color: #ffffff;

        }

        

        .modal h2 {

            color: #4fc3f7;

            margin-bottom: 20px;

        }

        

        .modal p {

            color: #b3e5fc;

            line-height: 1.6;

            margin-bottom: 15px;

        }

        

        .loading-overlay {

            position: fixed;

            top: 0;

            left: 0;

            width: 100%;

            height: 100%;

            background: rgba(10, 14, 39, 0.9);

            display: flex;

            justify-content: center;

            align-items: center;

            z-index: 100;

            opacity: 1;

            transition: opacity 0.5s ease;

        }

        

        .loading-overlay.hidden {

            opacity: 0;

            pointer-events: none;

        }

        

        .loader {

            width: 60px;

            height: 60px;

            border: 5px solid rgba(79, 195, 247, 0.2);

            border-top-color: #4fc3f7;

            border-radius: 50%;

            animation: spin 1s linear infinite;

        }

        

        @keyframes spin {

            to { transform: rotate(360deg); }

        }

        

        .data-loading {

            position: absolute;

            top: 50%;

            left: 50%;

            transform: translate(-50%, -50%);

            display: flex;

            flex-direction: column;

            align-items: center;

            gap: 15px;

            color: #4fc3f7;

        }

        

        .data-loading .loader {

            width: 40px;

            height: 40px;

        }

        

        .data-loading p {

            font-size: 0.9rem;

        }

        

        .earth-info {

            position: absolute;

            bottom: 20px;

            left: 50%;

            transform: translateX(-50%);

            text-align: center;

            color: #b3e5fc;

            font-size: 0.9rem;

            z-index: 10;

        }

        

        /* Sticky Instrument Navigation */

        .sticky-instruments {

            position: fixed;

            top: -100px;

            left: 0;

            width: 100%;

            background: linear-gradient(90deg, rgba(10, 14, 39, 0.95) 0%, rgba(26, 35, 126, 0.95) 100%);

            backdrop-filter: blur(10px);

            padding: 15px 0;

            z-index: 99;

            transition: top 0.3s ease;

            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);

        }

        

        .sticky-instruments.visible {

            top: 0;

        }

        

        .sticky-instruments-container {

            max-width: 1200px;

            margin: 0 auto;

            padding: 0 20px;

            display: flex;

            justify-content: center;

            align-items: center;

            gap: 20px;

            overflow-x: auto;

        }

        

        .sticky-instrument-card {

            display: flex;

            flex-direction: column;

            align-items: center;

            min-width: 120px;

            padding: 10px;

            background: rgba(255, 255, 255, 0.05);

            border-radius: 10px;

            cursor: pointer;

            transition: all 0.3s ease;

            border: 1px solid rgba(79, 195, 247, 0.2);

        }

        

        .sticky-instrument-card:hover {

            background: rgba(255, 255, 255, 0.1);

            transform: translateY(-5px);

        }

        

        .sticky-instrument-card.active {

            background: rgba(41, 182, 246, 0.2);

            border-color: #29b6f6;

        }

        

        .sticky-instrument-icon {

            font-size: 1.8rem;

            margin-bottom: 5px;

            color: #4fc3f7;

        }

        

        .sticky-instrument-card h3 {

            font-size: 0.9rem;

            color: #ffffff;

            margin: 0;

        }

        

        /* Custom Data Query Section */

        .custom-data-query {

            padding: 80px 20px;

            background: linear-gradient(180deg, #0d47a1 0%, #0a0e27 100%);

            position: relative;

        }

        

        .query-container {

            max-width: 900px;

            margin: 0 auto;

            background: rgba(0, 0, 0, 0.3);

            border-radius: 15px;

            padding: 40px;

            border: 1px solid rgba(79, 195, 247, 0.2);

        }

        

        .query-form {

            display: grid;

            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));

            gap: 25px;

            margin-bottom: 30px;

        }

        

        .form-group {

            display: flex;

            flex-direction: column;

        }

        

        .form-group label {

            margin-bottom: 8px;

            color: #4fc3f7;

            font-weight: 500;

        }

        

        .form-group input,

        .form-group select {

            padding: 12px 15px;

            background: rgba(255, 255, 255, 0.1);

            border: 1px solid rgba(79, 195, 247, 0.3);

            border-radius: 8px;

            color: white;

            font-size: 1rem;

            transition: all 0.3s ease;

        }

        

        .form-group input:focus,

        .form-group select:focus {

            outline: none;

            border-color: #29b6f6;

            background: rgba(255, 255, 255, 0.15);

        }

        

        .form-group select option {

            background: #0a0e27;

        }

        

        .form-actions {

            display: flex;

            justify-content: center;

            margin-top: 20px;

        }

        

        .query-result {

            margin-top: 40px;

            padding: 30px;

            background: rgba(0, 0, 0, 0.2);

            border-radius: 15px;

            border: 1px solid rgba(79, 195, 247, 0.2);

            display: none;

        }

        

        .query-result.active {

            display: block;

        }

        

        .result-header {

            display: flex;

            justify-content: space-between;

            align-items: center;

            margin-bottom: 20px;

            padding-bottom: 15px;

            border-bottom: 1px solid rgba(79, 195, 247, 0.2);

        }

        

        .result-header h3 {

            color: #4fc3f7;

            font-size: 1.5rem;

        }

        

        .result-date {

            color: #b3e5fc;

            font-size: 0.9rem;

        }

        

        .result-content {

            display: flex;

            flex-direction: column;

            gap: 15px;

        }

        

        .result-data {

            display: grid;

            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));

            gap: 15px;

        }

        

        .data-item {

            display: flex;

            justify-content: space-between;

            padding: 15px;

            background: rgba(255, 255, 255, 0.05);

            border-radius: 8px;

            transition: all 0.3s ease;

        }

        

        .data-item:hover {

            background: rgba(255, 255, 255, 0.1);

            transform: translateY(-2px);

        }

        

        .data-label {

            color: #b3e5fc;

            font-weight: 500;

        }

        

        .data-value {

            color: #ffffff;

            font-weight: 500;

        }

        

        .error-message {

            color: #ff5252;

            padding: 15px;

            background: rgba(255, 82, 82, 0.1);

            border-radius: 8px;

            margin-top: 20px;

            display: none;

        }

        

        .error-message.active {

            display: block;

        }

        

        .api-info {

            margin-top: 20px;

            padding: 15px;

            background: rgba(79, 195, 247, 0.1);

            border-radius: 8px;

            border-left: 4px solid #4fc3f7;

        }

        

        .api-info p {

            color: #b3e5fc;

            font-size: 0.9rem;

            margin: 0;

        }

        

        .api-info a {

            color: #4fc3f7;

            text-decoration: none;

        }

        

        .api-info a:hover {

            text-decoration: underline;

        }

        

        @media (max-width: 768px) {

            .hero h2 {

                font-size: 2rem;

            }

            

            .globe-container {

                width: 300px;

                height: 300px;

            }

            

            .story-container {

                flex-direction: column;

            }

            

            nav {

                display: none;

            }

            

            .sticky-instruments-container {

                padding: 0 10px;

                gap: 10px;

            }

            

            .sticky-instrument-card {

                min-width: 100px;

                padding: 8px;

            }

            

            .sticky-instrument-icon {

                font-size: 1.5rem;

            }

            

            .sticky-instrument-card h3 {

                font-size: 0.8rem;

            }

            

            .query-form {

                grid-template-columns: 1fr;

            }

            

            .result-data {

                grid-template-columns: 1fr;

            }

        }

    </style>

</head>

<body>

    <div class="loading-overlay" id="loadingOverlay">

        <div class="loader"></div>

    </div>

    

    <header>

        <div class="logo">

            <i class="fas fa-satellite"></i>

            <div>

                <h1>TERRA SATELLITE</h1>

                <span>25 Years of Earth Observation</span>

            </div>

        </div>

        <nav>

            <a href="#home" class="active">Home</a>

            <a href="#data">Data</a>

            <a href="#query">Query</a>

            <a href="#impact">Impact</a>

        </nav>

    </header>

    

    <!-- Sticky Instrument Navigation -->

    <div class="sticky-instruments" id="stickyInstruments">

        <div class="sticky-instruments-container">

            <div class="sticky-instrument-card" onclick="selectStickyInstrument('aster')">

                <div class="sticky-instrument-icon">

                    <i class="fas fa-mountain"></i>

                </div>

                <h3>ASTER</h3>

            </div>

            <div class="sticky-instrument-card" onclick="selectStickyInstrument('ceres')">

                <div class="sticky-instrument-icon">

                    <i class="fas fa-cloud-sun"></i>

                </div>

                <h3>CERES</h3>

            </div>

            <div class="sticky-instrument-card" onclick="selectStickyInstrument('misr')">

                <div class="sticky-instrument-icon">

                    <i class="fas fa-camera"></i>

                </div>

                <h3>MISR</h3>

            </div>

            <div class="sticky-instrument-card" onclick="selectStickyInstrument('modis')">

                <div class="sticky-instrument-icon">

                    <i class="fas fa-globe-americas"></i>

                </div>

                <h3>MODIS</h3>

            </div>

            <div class="sticky-instrument-card" onclick="selectStickyInstrument('mopitt')">

                <div class="sticky-instrument-icon">

                    <i class="fas fa-smog"></i>

                </div>

                <h3>MOPITT</h3>

            </div>

        </div>

    </div>

    

    <section class="hero" id="home">

        <div class="stars" id="stars"></div>

        <div class="hero-content">

            <h2>25 Years of Watching Our Earth</h2>

            <p>NASA's Terra satellite has been continuously observing our planet for a quarter century, collecting vital data on Earth's atmosphere, land, oceans, and energy balance. Explore how this data reveals our changing world and impacts us all.</p>

            <button class="btn" onclick="scrollToSection('data')">Explore Data</button>

        </div>

        <div class="globe-container" id="globe-container">

            <div class="globe">

                <div class="globe-overlay"></div>

                <div class="heat-overlay"></div>

            </div>

            <div class="earth-info">Drag to rotate • Scroll to zoom</div>

        </div>

    </section>

    

    <section class="data-visualization" id="data">

        <div class="container">

            <div class="section-title">

                <h2>Earth Science Data Visualizations</h2>

                <p>Explore 25 years of Terra data to understand changes in our planet's systems</p>

            </div>

            <div class="viz-container">

                <div class="viz-controls">

                    <button class="viz-btn active" onclick="showViz('temperature')">Temperature</button>

                    <button class="viz-btn" onclick="showViz('co2')">CO2 Levels</button>

                    <button class="viz-btn" onclick="showViz('ice')">Ice Coverage</button>

                    <button class="viz-btn" onclick="showViz('vegetation')">Vegetation</button>

                </div>

                <div class="viz-display">

                    <div class="viz-content active" id="temperature-viz">

                        <div class="chart-container">

                            <canvas id="tempChart" class="chart"></canvas>

                            <div class="data-loading" id="temp-loading">

                                <div class="loader"></div>

                                <p>Loading temperature data from NASA API...</p>

                            </div>

                        </div>

                    </div>

                    <div class="viz-content" id="co2-viz">

                        <div class="chart-container">

                            <canvas id="co2Chart" class="chart"></canvas>

                            <div class="data-loading" id="co2-loading">

                                <div class="loader"></div>

                                <p>Loading CO2 data from NASA API...</p>

                            </div>

                        </div>

                    </div>

                    <div class="viz-content" id="ice-viz">

                        <div class="chart-container">

                            <canvas id="iceChart" class="chart"></canvas>

                            <div class="data-loading" id="ice-loading">

                                <div class="loader"></div>

                                <p>Loading ice coverage data from NASA API...</p>

                            </div>

                        </div>

                    </div>

                    <div class="viz-content" id="vegetation-viz">

                        <div class="chart-container">

                            <canvas id="vegChart" class="chart"></canvas>

                            <div class="data-loading" id="veg-loading">

                                <div class="loader"></div>

                                <p>Loading vegetation data from NASA API...</p>

                            </div>

                        </div>

                    </div>

                </div>

                <div class="timeline">

                    <div class="timeline-track">

                        <div class="timeline-progress"></div>

                    </div>

                    <div class="timeline-markers">

                        <div class="timeline-marker">

                            <span>1999</span>

                        </div>

                        <div class="timeline-marker">

                            <span>2005</span>

                        </div>

                        <div class="timeline-marker">

                            <span>2010</span>

                        </div>

                        <div class="timeline-marker">

                            <span>2015</span>

                        </div>

                        <div class="timeline-marker">

                            <span>2020</span>

                        </div>

                        <div class="timeline-marker">

                            <span>2024</span>

                        </div>

                    </div>

                </div>

            </div>

        </div>

    </section>

    

    <!-- Custom Data Query Section -->

    <section class="custom-data-query" id="query">

        <div class="container">

            <div class="section-title">

                <h2>Custom Data Query</h2>

                <p>Explore Terra satellite data for specific dates, locations, and areas of interest</p>

            </div>

            <div class="query-container">

                <form id="queryForm" class="query-form">

                    <div class="form-group">

                        <label for="date">Date</label>

                        <input type="date" id="date" name="date" required>

                    </div>

                    <div class="form-group">

                        <label for="location">Location</label>

                        <input type="text" id="location" name="location" placeholder="e.g., New York, USA" required>

                    </div>

                    <div class="form-group">

                        <label for="latitude">Latitude</label>

                        <input type="number" id="latitude" name="latitude" placeholder="e.g., 40.7128" step="0.0001" min="-90" max="90" required>

                    </div>

                    <div class="form-group">

                        <label for="longitude">Longitude</label>

                        <input type="number" id="longitude" name="longitude" placeholder="e.g., -74.0060" step="0.0001" min="-180" max="180" required>

                    </div>

                    <div class="form-group">

                        <label for="dataset">Dataset</label>

                        <select id="dataset" name="dataset" required>

                            <option value="">Select a dataset</option>

                            <option value="temperature">Temperature</option>

                            <option value="vegetation">Vegetation Index</option>

                            <option value="aerosol">Aerosol Optical Depth</option>

                            <option value="water_vapor">Water Vapor</option>

                            <option value="clouds">Cloud Properties</option>

                        </select>

                    </div>

                    <div class="form-group">

                        <label for="area">Area Size (km)</label>

                        <input type="number" id="area" name="area" placeholder="e.g., 10" min="1" max="100" value="10" required>

                    </div>

                </form>

                <div class="form-actions">

                    <button type="submit" form="queryForm" class="btn">Query Data</button>

                </div>

                <div class="error-message" id="errorMessage"></div>

                <div class="api-info">

                    <p>Data source: <a href="https://earthdata.nasa.gov/" target="_blank">NASA Earth Observing System Data and Information System (EOSDIS)</a></p>

                </div>

                <div class="query-result" id="queryResult">

                    <div class="result-header">

                        <h3 id="resultTitle">Query Results</h3>

                        <div class="result-date" id="resultDate"></div>

                    </div>

                    <div class="result-content">

                        <div class="result-data">

                            <div class="data-item">

                                <span class="data-label">Location:</span>

                                <span class="data-value" id="resultLocation"></span>

                            </div>

                            <div class="data-item">

                                <span class="data-label">Coordinates:</span>

                                <span class="data-value" id="resultCoords"></span>

                            </div>

                            <div class="data-item">

                                <span class="data-label">Dataset:</span>

                                <span class="data-value" id="resultDataset"></span>

                            </div>

                            <div class="data-item">

                                <span class="data-label">Value:</span>

                                <span class="data-value" id="resultValue"></span>

                            </div>

                            <div class="data-item">

                                <span class="data-label">Unit:</span>

                                <span class="data-value" id="resultUnit"></span>

                            </div>

                            <div class="data-item">

                                <span class="data-label">Quality:</span>

                                <span class="data-value" id="resultQuality"></span>

                            </div>

                        </div>

                    </div>

                </div>

            </div>

        </div>

    </section>

    

    <section class="impact-story" id="impact">

        <div class="container">

            <div class="section-title">

                <h2>Impacts on Our World</h2>

                <p>How Terra's data helps us understand and address environmental challenges affecting communities worldwide</p>

            </div>

            <div class="story-container">

                <div class="story-text">

                    <h3>Climate Change & Extreme Weather</h3>

                    <p>Terra's instruments have documented rising global temperatures, changing precipitation patterns, and increasing frequency of extreme weather events. This data helps communities prepare for and respond to climate-related challenges.</p>

                    <p>From farmers adjusting planting seasons to coastal communities planning for sea-level rise, Terra's observations provide critical information for adaptation strategies.</p>

                    <button class="btn" onclick="openModal('climate')">Learn More</button>

                </div>

                <div class="story-visual">

                    <img src="https://picsum.photos/seed/climate/800/400.jpg" alt="Climate Change Visualization" style="width: 100%; height: 100%; object-fit: cover;">

                </div>

            </div>

            

            <div class="story-container" style="margin-top: 60px;">

                <div class="story-visual">

                    <img src="https://picsum.photos/seed/airquality/800/400.jpg" alt="Air Quality Visualization" style="width: 100%; height: 100%; object-fit: cover;">

                </div>

                <div class="story-text">

                    <h3>Air Quality & Public Health</h3>

                    <p>MOPITT and other Terra instruments track pollutants like carbon monoxide, aerosols, and ozone in our atmosphere. This data helps identify pollution sources and assess air quality impacts on public health.</p>

                    <p>Cities use this information to implement clean air policies, issue health advisories, and reduce exposure to harmful pollutants that affect respiratory health.</p>

                    <button class="btn" onclick="openModal('air')">Learn More</button>

                </div>

            </div>

            

            <div class="story-container" style="margin-top: 60px;">

                <div class="story-text">

                    <h3>Ecosystems & Biodiversity</h3>

                    <p>Terra monitors changes in forests, wetlands, and other ecosystems, providing crucial data on habitat loss, deforestation, and ecosystem health. This information supports conservation efforts and biodiversity protection.</p>

                    <p>Researchers and policymakers use these observations to identify critical habitats, track restoration efforts, and understand how climate change affects species distribution.</p>

                    <button class="btn" onclick="openModal('ecosystem')">Learn More</button>

                </div>

                <div class="story-visual">

                    <img src="https://picsum.photos/seed/ecosystem/800/400.jpg" alt="Ecosystem Visualization" style="width: 100%; height: 100%; object-fit: cover;">

                </div>

            </div>

        </div>

    </section>

    

    <footer class="footer">

        <p>NASA Terra Satellite - 25 Years of Earth Observation</p>

        <div class="social-links">

            <a href="#"><i class="fab fa-twitter"></i></a>

            <a href="#"><i class="fab fa-facebook"></i></a>

            <a href="#"><i class="fab fa-instagram"></i></a>

            <a href="#"><i class="fab fa-youtube"></i></a>

        </div>

    </footer>

    

    <div class="modal" id="infoModal">

        <div class="modal-content">

            <span class="close-modal" onclick="closeModal()">&times;</span>

            <h2 id="modalTitle">Title</h2>

            <div id="modalContent">

                <p>Content will be loaded here...</p>

            </div>

        </div>

    </div>

    

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

    <script>

        // NASA API configuration

        const NASA_API_KEY = 'VQrZFnlmpMhTIyAutXD4LfXNBIKkR6SO0cw49JFq';

        const NASA_API_BASE_URL = 'https://api.nasa.gov/planetary/earth';

        const GISS_API_URL = 'https://data.giss.nasa.gov/gistemp/tabledata_v4/GLB.Ts+dSST.csv';

        const OCO2_API_URL = 'https://ocov2.jpl.nasa.gov/ocov2/api/data';

        const NSIDC_API_URL = 'https://nsidc.org/api/data';

        

        // Generate stars

        function generateStars() {

            const starsContainer = document.getElementById('stars');

            const starCount = 200;

            

            for (let i = 0; i < starCount; i++) {

                const star = document.createElement('div');

                star.classList.add('star');

                star.style.left = `${Math.random() * 100}%`;

                star.style.top = `${Math.random() * 100}%`;

                star.style.animationDelay = `${Math.random() * 4}s`;

                starsContainer.appendChild(star);

            }

        }

        

        // Initialize stars on page load

        generateStars();

        

        // Hide loading overlay after page loads

        window.addEventListener('load', () => {

            setTimeout(() => {

                document.getElementById('loadingOverlay').classList.add('hidden');

            }, 1000);

        });

        

        // Smooth scrolling

        function scrollToSection(sectionId) {

            const section = document.getElementById(sectionId);

            const stickyInstruments = document.getElementById('stickyInstruments');

            const offset = stickyInstruments.classList.contains('visible') ? 100 : 80;

            

            window.scrollTo({

                top: section.offsetTop - offset,

                behavior: 'smooth'

            });

        }

        

        // Navigation active state

        document.querySelectorAll('nav a').forEach(link => {

            link.addEventListener('click', function(e) {

                e.preventDefault();

                document.querySelectorAll('nav a').forEach(a => a.classList.remove('active'));

                this.classList.add('active');

                const targetId = this.getAttribute('href').substring(1);

                scrollToSection(targetId);

            });

        });

        

        // Sticky instrument selection

        function selectStickyInstrument(instrument) {

            updateStickyInstrumentSelection(instrument);

            

            // In a real application, this would load data specific to the selected instrument

            console.log(`Selected instrument: ${instrument}`);

        }

        

        // Update sticky instrument selection

        function updateStickyInstrumentSelection(instrument) {

            document.querySelectorAll('.sticky-instrument-card').forEach(card => {

                card.classList.remove('active');

            });

            

            // Find and activate the corresponding sticky card

            const stickyCards = document.querySelectorAll('.sticky-instrument-card');

            const instrumentMap = ['aster', 'ceres', 'misr', 'modis', 'mopitt'];

            const index = instrumentMap.indexOf(instrument);

            if (index !== -1 && stickyCards[index]) {

                stickyCards[index].classList.add('active');

            }

        }

        

        // Visualization switching

        function showViz(vizType) {

            document.querySelectorAll('.viz-btn').forEach(btn => {

                btn.classList.remove('active');

            });

            event.currentTarget.classList.add('active');

            

            document.querySelectorAll('.viz-content').forEach(content => {

                content.classList.remove('active');

            });

            document.getElementById(`${vizType}-viz`).classList.add('active');

            

            // Update chart based on selection

            updateChart(vizType);

        }

        

        // Chart initialization

        let tempChart, co2Chart, iceChart, vegChart;

        

        // Fetch data from NASA API

        async function fetchNASAData(dataset, startDate, endDate) {

            try {

                let data;

                

                switch(dataset) {

                    case 'temperature':

                        // Fetch GISTEMP temperature data

                        data = await fetchGISTEMPTemperatureData();

                        break;

                    case 'co2':

                        // Fetch CO2 data from OCO-2 satellite

                        data = await fetchCO2Data();

                        break;

                    case 'ice':

                        // Fetch sea ice data from NSIDC

                        data = await fetchSeaIceData();

                        break;

                    case 'vegetation':

                        // Fetch NDVI data from MODIS

                        data = await fetchNDVIData();

                        break;

                    default:

                        // Return mock data if dataset is not recognized

                        return getMockData(dataset);

                }

                

                return data;

            } catch (error) {

                console.error('Error fetching NASA data:', error);

                // Return mock data if API fails

                return getMockData(dataset);

            }

        }

        

        // Fetch GISTEMP temperature data

        async function fetchGISTEMPTemperatureData() {

            try {

                const response = await fetch(GISS_API_URL);

                

                if (!response.ok) {

                    throw new Error(`GISS API request failed: ${response.status}`);

                }

                

                const csvData = await response.text();

                return parseGISTEMPCSV(csvData);

            } catch (error) {

                console.error('Error fetching GISTEMP data:', error);

                throw error;

            }

        }

        

        // Parse GISTEMP CSV data

        function parseGISTEMPCSV(csvData) {

            const lines = csvData.split('\n');

            const labels = [];

            const data = [];

            

            // Skip header lines and parse data

            for (let i = 7; i < lines.length; i++) {

                const line = lines[i].trim();

                if (!line) continue;

                

                const parts = line.split(',');

                if (parts.length < 13) continue;

                

                const year = parts[0];

                if (year < '1999' || year > '2023') continue;

                

                // Get annual mean (column 13)

                const value = parseFloat(parts[12]);

                if (isNaN(value)) continue;

                

                labels.push(year);

                data.push(value);

            }

            

            return { labels, data };

        }

        

        // Fetch CO2 data

        async function fetchCO2Data() {

            try {

                // Using NOAA's CO2 data as an alternative to OCO-2 API

                const response = await fetch('https://gml.noaa.gov/webdata/ccgg/trends/co2/co2_annmean_mlo.csv');

                

                if (!response.ok) {

                    throw new Error(`NOAA CO2 API request failed: ${response.status}`);

                }

                

                const csvData = await response.text();

                return parseCO2CSV(csvData);

            } catch (error) {

                console.error('Error fetching CO2 data:', error);

                throw error;

            }

        }

        

        // Parse CO2 CSV data

        function parseCO2CSV(csvData) {

            const lines = csvData.split('\n');

            const labels = [];

            const data = [];

            

            // Skip header line and parse data

            for (let i = 1; i < lines.length; i++) {

                const line = lines[i].trim();

                if (!line) continue;

                

                const parts = line.split(',');

                if (parts.length < 2) continue;

                

                const year = parts[0];

                if (year < '1999' || year > '2023') continue;

                

                const value = parseFloat(parts[1]);

                if (isNaN(value)) continue;

                

                labels.push(year);

                data.push(value);

            }

            

            return { labels, data };

        }

        

        // Fetch sea ice data

        async function fetchSeaIceData() {

            try {

                // Using NSIDC sea ice data

                const response = await fetch('https://nsidc.org/data/seaice_index/archives/Sea_Ice_Index_Monthly_Data_by_Year_G02135_v3.0.xlsx');

                

                if (!response.ok) {

                    throw new Error(`NSIDC API request failed: ${response.status}`);

                }

                

                // Since we can't directly parse Excel in the browser, we'll use a CSV alternative

                const csvResponse = await fetch('https://raw.githubusercontent.com/datasets/sea-ice-index/master/data/annual-extent.csv');

                const csvData = await csvResponse.text();

                

                return parseSeaIceCSV(csvData);

            } catch (error) {

                console.error('Error fetching sea ice data:', error);

                throw error;

            }

        }

        

        // Parse sea ice CSV data

        function parseSeaIceCSV(csvData) {

            const lines = csvData.split('\n');

            const labels = [];

            const data = [];

            

            // Skip header line and parse data

            for (let i = 1; i < lines.length; i++) {

                const line = lines[i].trim();

                if (!line) continue;

                

                const parts = line.split(',');

                if (parts.length < 3) continue;

                

                const year = parts[0];

                if (year < '1999' || year > '2023') continue;

                

                // Get Arctic September extent (column 3)

                const value = parseFloat(parts[2]);

                if (isNaN(value)) continue;

                

                labels.push(year);

                data.push(value);

            }

            

            return { labels, data };

        }

        

        // Fetch NDVI data

        async function fetchNDVIData() {

            try {

                // Using MODIS NDVI data from NASA Earthdata

                // Since direct API access requires authentication, we'll use a public dataset

                const response = await fetch('https://raw.githubusercontent.com/earthlab/modis-ndvi-time-series/master/data/ndvi_timeseries.csv');

                

                if (!response.ok) {

                    throw new Error(`NDVI API request failed: ${response.status}`);

                }

                

                const csvData = await response.text();

                return parseNDVICSV(csvData);

            } catch (error) {

                console.error('Error fetching NDVI data:', error);

                throw error;

            }

        }

        

        // Parse NDVI CSV data

        function parseNDVICSV(csvData) {

            const lines = csvData.split('\n');

            const labels = [];

            const data = [];

            

            // Skip header line and parse data

            for (let i = 1; i < lines.length; i++) {

                const line = lines[i].trim();

                if (!line) continue;

                

                const parts = line.split(',');

                if (parts.length < 2) continue;

                

                const year = parts[0];

                if (year < '1999' || year > '2023') continue;

                

                const value = parseFloat(parts[1]);

                if (isNaN(value)) continue;

                

                labels.push(year);

                data.push(value);

            }

            

            return { labels, data };

        }

        

        // Get mock data for demonstration

        function getMockData(dataset) {

            const years = ['1999', '2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021', '2023'];

            

            switch(dataset) {

                case 'temperature':

                    return {

                        labels: years,

                        data: [0.42, 0.54, 0.62, 0.68, 0.66, 0.65, 0.59, 0.67, 0.87, 0.92, 0.98, 0.85, 1.17]

                    };

                case 'co2':

                    return {

                        labels: years,

                        data: [368, 371, 376, 380, 384, 387, 391, 397, 401, 406, 411, 416, 421]

                    };

                case 'ice':

                    return {

                        labels: years,

                        data: [7.0, 6.9, 6.7, 6.5, 6.3, 5.9, 5.7, 5.4, 5.2, 4.9, 4.7, 4.5, 4.3]

                    };

                case 'vegetation':

                    return {

                        labels: years,

                        data: [0.46, 0.462, 0.464, 0.465, 0.466, 0.467, 0.468, 0.469, 0.47, 0.471, 0.472, 0.473, 0.474]

                    };

                default:

                    return { labels: years, data: [] };

            }

        }

        

        // Initialize charts with data

        async function initCharts() {

            // Temperature Chart

            const tempCtx = document.getElementById('tempChart').getContext('2d');

            const tempLoading = document.getElementById('temp-loading');

            

            // Show loading indicator

            tempLoading.style.display = 'flex';

            

            // Fetch temperature data

            const tempData = await fetchNASAData('temperature', '1999-01-01', '2023-12-31');

            

            tempChart = new Chart(tempCtx, {

                type: 'line',

                data: {

                    labels: tempData.labels,

                    datasets: [{

                        label: 'Global Temperature Anomaly (°C)',

                        data: tempData.data,

                        borderColor: '#ff5722',

                        backgroundColor: 'rgba(255, 87, 34, 0.1)',

                        tension: 0.4,

                        fill: true

                    }]

                },

                options: {

                    responsive: true,

                    maintainAspectRatio: false,

                    plugins: {

                        legend: {

                            labels: {

                                color: '#b3e5fc'

                            }

                        },

                        tooltip: {

                            callbacks: {

                                label: function(context) {

                                    return `${context.dataset.label}: ${context.raw}°C`;

                                }

                            }

                        }

                    },

                    scales: {

                        y: {

                            ticks: {

                                color: '#b3e5fc',

                                callback: function(value) {

                                    return value + '°C';

                                }

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        },

                        x: {

                            ticks: {

                                color: '#b3e5fc'

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        }

                    }

                }

            });

            

            // Hide loading indicator

            tempLoading.style.display = 'none';

            

            // CO2 Chart

            const co2Ctx = document.getElementById('co2Chart').getContext('2d');

            const co2Loading = document.getElementById('co2-loading');

            

            // Show loading indicator

            co2Loading.style.display = 'flex';

            

            // Fetch CO2 data

            const co2Data = await fetchNASAData('co2', '1999-01-01', '2023-12-31');

            

            co2Chart = new Chart(co2Ctx, {

                type: 'line',

                data: {

                    labels: co2Data.labels,

                    datasets: [{

                        label: 'Atmospheric CO2 (ppm)',

                        data: co2Data.data,

                        borderColor: '#4caf50',

                        backgroundColor: 'rgba(76, 175, 80, 0.1)',

                        tension: 0.4,

                        fill: true

                    }]

                },

                options: {

                    responsive: true,

                    maintainAspectRatio: false,

                    plugins: {

                        legend: {

                            labels: {

                                color: '#b3e5fc'

                            }

                        },

                        tooltip: {

                            callbacks: {

                                label: function(context) {

                                    return `${context.dataset.label}: ${context.raw} ppm`;

                                }

                            }

                        }

                    },

                    scales: {

                        y: {

                            ticks: {

                                color: '#b3e5fc',

                                callback: function(value) {

                                    return value + ' ppm';

                                }

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        },

                        x: {

                            ticks: {

                                color: '#b3e5fc'

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        }

                    }

                }

            });

            

            // Hide loading indicator

            co2Loading.style.display = 'none';

            

            // Ice Chart

            const iceCtx = document.getElementById('iceChart').getContext('2d');

            const iceLoading = document.getElementById('ice-loading');

            

            // Show loading indicator

            iceLoading.style.display = 'flex';

            

            // Fetch ice data

            const iceData = await fetchNASAData('ice', '1999-01-01', '2023-12-31');

            

            iceChart = new Chart(iceCtx, {

                type: 'line',

                data: {

                    labels: iceData.labels,

                    datasets: [{

                        label: 'Arctic Sea Ice Extent (million sq km)',

                        data: iceData.data,

                        borderColor: '#03a9f4',

                        backgroundColor: 'rgba(3, 169, 244, 0.1)',

                        tension: 0.4,

                        fill: true

                    }]

                },

                options: {

                    responsive: true,

                    maintainAspectRatio: false,

                    plugins: {

                        legend: {

                            labels: {

                                color: '#b3e5fc'

                            }

                        },

                        tooltip: {

                            callbacks: {

                                label: function(context) {

                                    return `${context.dataset.label}: ${context.raw} million sq km`;

                                }

                            }

                        }

                    },

                    scales: {

                        y: {

                            ticks: {

                                color: '#b3e5fc',

                                callback: function(value) {

                                    return value + ' M km²';

                                }

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        },

                        x: {

                            ticks: {

                                color: '#b3e5fc'

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        }

                    }

                }

            });

            

            // Hide loading indicator

            iceLoading.style.display = 'none';

            

            // Vegetation Chart

            const vegCtx = document.getElementById('vegChart').getContext('2d');

            const vegLoading = document.getElementById('veg-loading');

            

            // Show loading indicator

            vegLoading.style.display = 'flex';

            

            // Fetch vegetation data

            const vegData = await fetchNASAData('vegetation', '1999-01-01', '2023-12-31');

            

            vegChart = new Chart(vegCtx, {

                type: 'line',

                data: {

                    labels: vegData.labels,

                    datasets: [{

                        label: 'Global Vegetation Index (NDVI)',

                        data: vegData.data,

                        borderColor: '#8bc34a',

                        backgroundColor: 'rgba(139, 195, 74, 0.1)',

                        tension: 0.4,

                        fill: true

                    }]

                },

                options: {

                    responsive: true,

                    maintainAspectRatio: false,

                    plugins: {

                        legend: {

                            labels: {

                                color: '#b3e5fc'

                            }

                        },

                        tooltip: {

                            callbacks: {

                                label: function(context) {

                                    return `${context.dataset.label}: ${context.raw}`;

                                }

                            }

                        }

                    },

                    scales: {

                        y: {

                            ticks: {

                                color: '#b3e5fc'

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        },

                        x: {

                            ticks: {

                                color: '#b3e5fc'

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        }

                    }

                }

            });

            

            // Hide loading indicator

            vegLoading.style.display = 'none';

        }

        

        // Update chart with animation

        function updateChart(chartType) {

            // In a real application, this would update the chart with new data

            // For this demo, we'll just trigger a resize to ensure the chart displays properly

            switch(chartType) {

                case 'temperature':

                    tempChart.resize();

                    break;

                case 'co2':

                    co2Chart.resize();

                    break;

                case 'ice':

                    iceChart.resize();

                    break;

                case 'vegetation':

                    vegChart.resize();

                    break;

            }

        }

        

        // Modal functions

        function openModal(topic) {

            const modal = document.getElementById('infoModal');

            const modalTitle = document.getElementById('modalTitle');

            const modalContent = document.getElementById('modalContent');

            

            // Set content based on topic

            switch(topic) {

                case 'climate':

                    modalTitle.textContent = 'Climate Change & Extreme Weather';

                    modalContent.innerHTML = `

                        <p>Terra's instruments have provided unprecedented observations of Earth's climate system over the past 25 years. The data shows clear trends in rising temperatures, changing precipitation patterns, and increasing frequency of extreme weather events.</p>

                        <p>MODIS has documented shrinking snow cover and ice sheets, while CERES has measured Earth's energy imbalance, showing how our planet is trapping more heat than it radiates to space. ASTER has captured glacial retreat and changes in land surface temperature.</p>

                        <p>These observations help communities prepare for climate impacts. Farmers use Terra data to adjust planting seasons, water managers monitor snowpack for water supply planning, and coastal communities track sea-level rise to inform infrastructure decisions.</p>

                        <p>The data also supports international climate agreements by providing objective measurements of global changes, helping policymakers develop effective mitigation and adaptation strategies.</p>

                    `;

                    break;

                case 'air':

                    modalTitle.textContent = 'Air Quality & Public Health';

                    modalContent.innerHTML = `

                        <p>MOPITT (Measurements of Pollution in the Troposphere) has been tracking carbon monoxide in the atmosphere since 1999, providing the longest continuous record of this important pollutant. Combined with MODIS aerosol measurements, Terra gives us a comprehensive view of air quality worldwide.</p>

                        <p>This data has revealed pollution hotspots, tracked the movement of smoke from wildfires, and measured the impact of industrial emissions on air quality. During events like volcanic eruptions and major wildfires, Terra observations help predict where smoke and ash will travel, protecting public health.</p>

                        <p>Cities use Terra data to implement clean air policies, identify pollution sources, and assess the effectiveness of emission reduction strategies. The data supports air quality alerts that help people with respiratory conditions avoid exposure to harmful pollutants.</p>

                        <p>Research using Terra data has linked air pollution to various health outcomes, providing evidence for stronger air quality regulations that protect vulnerable populations.</p>

                    `;

                    break;

                case 'ecosystem':

                    modalTitle.textContent = 'Ecosystems & Biodiversity';

                    modalContent.innerHTML = `

                        <p>Terra's instruments have revolutionized our ability to monitor Earth's ecosystems at a global scale. MODIS provides daily observations of vegetation health, while ASTER's high-resolution imagery captures detailed changes in land cover.</p>

                        <p>These observations have documented deforestation in the Amazon, drought impacts on agricultural lands, and recovery of ecosystems after disturbances. The data helps identify biodiversity hotspots and track habitat changes that threaten species.</p>

                        <p>Conservation organizations use Terra data to prioritize protection efforts, monitor illegal logging and mining activities, and assess the effectiveness of protected areas. The data supports restoration projects by identifying degraded areas and tracking recovery over time.</p>

                        <p>By understanding how ecosystems respond to climate change and human activities, we can develop better strategies to protect the biodiversity and ecosystem services that sustain human communities.</p>

                    `;

                    break;

            }

            

            modal.style.display = 'flex';

        }

        

        function closeModal() {

            document.getElementById('infoModal').style.display = 'none';

        }

        

        // Close modal when clicking outside

        window.onclick = function(event) {

            const modal = document.getElementById('infoModal');

            if (event.target === modal) {

                modal.style.display = 'none';

            }

        }

        

        // Initialize charts when the page loads

        window.addEventListener('load', initCharts);

        

        // Add parallax effect to hero section

        window.addEventListener('scroll', () => {

            const scrolled = window.pageYOffset;

            const parallax = document.querySelector('.hero');

            parallax.style.transform = `translateY(${scrolled * 0.5}px)`;

            

            // Show/hide sticky instruments based on scroll position

            const stickyInstruments = document.getElementById('stickyInstruments');

            const scrollPosition = window.scrollY;

            

            // Show sticky navigation after scrolling past the hero section

            if (scrollPosition > 200) {

                stickyInstruments.classList.add('visible');

            } else {

                stickyInstruments.classList.remove('visible');

            }

        });

        

        // 3D Earth initialization

        let scene, camera, renderer, earth, earthGroup, atmosphere, clouds;

        let mouseX = 0, mouseY = 0;

        let targetRotationX = 0, targetRotationY = 0;

        let isMouseDown = false;

        let previousMousePosition = { x: 0, y: 0 };

        

        function init3DEarth() {

            const container = document.getElementById('globe-container');

            const width = container.clientWidth;

            const height = container.clientHeight;

            

            // Create scene

            scene = new THREE.Scene();

            

            // Create camera

            camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);

            camera.position.z = 2.5;

            

            // Create renderer

            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });

            renderer.setSize(width, height);

            renderer.setClearColor(0x000000, 0);

            container.appendChild(renderer.domElement);

            

            // Create Earth group

            earthGroup = new THREE.Group();

            scene.add(earthGroup);

            

            // Create Earth

            const geometry = new THREE.SphereGeometry(1, 64, 64);

            

            // Load Earth texture

            const textureLoader = new THREE.TextureLoader();

            

            // Use a proper Earth texture URL

            const earthTexture = textureLoader.load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_atmos_2048.jpg');

            const earthSpecularMap = textureLoader.load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_specular_2048.jpg');

            const earthNormalMap = textureLoader.load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_normal_2048.jpg');

            

            const material = new THREE.MeshPhongMaterial({

                map: earthTexture,

                specularMap: earthSpecularMap,

                normalMap: earthNormalMap,

                bumpScale: 0.05,

                specular: new THREE.Color('grey'),

                shininess: 10

            });

            

            earth = new THREE.Mesh(geometry, material);

            earthGroup.add(earth);

            

            // Add clouds

            const cloudGeometry = new THREE.SphereGeometry(1.01, 64, 64);

            const cloudTexture = textureLoader.load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_clouds_1024.png');

            

            const cloudMaterial = new THREE.MeshPhongMaterial({

                map: cloudTexture,

                opacity: 0.4,

                transparent: true,

                depthWrite: false

            });

            

            clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);

            earthGroup.add(clouds);

            

            // Add atmosphere glow

            const atmosphereGeometry = new THREE.SphereGeometry(1.1, 64, 64);

            const atmosphereMaterial = new THREE.ShaderMaterial({

                vertexShader: `

                    varying vec3 vNormal;

                    void main() {

                        vNormal = normalize(normalMatrix * normal);

                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);

                    }

                `,

                fragmentShader: `

                    varying vec3 vNormal;

                    void main() {

                        float intensity = pow(0.7 - dot(vNormal, vec3(0, 0, 1.0)), 2.0);

                        gl_FragColor = vec4(0.3, 0.6, 1.0, 1.0) * intensity;

                    }

                `,

                blending: THREE.AdditiveBlending,

                side: THREE.BackSide,

                transparent: true

            });

            

            atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);

            earthGroup.add(atmosphere);

            

            // Add lights

            const ambientLight = new THREE.AmbientLight(0x333333);

            scene.add(ambientLight);

            

            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);

            directionalLight.position.set(5, 3, 5);

            scene.add(directionalLight);

            

            // Add a second light for better contrast

            const directionalLight2 = new THREE.DirectionalLight(0x7c7cff, 0.3);

            directionalLight2.position.set(-5, -3, -5);

            scene.add(directionalLight2);

            

            // Add mouse controls

            container.addEventListener('mousedown', onMouseDown);

            container.addEventListener('mousemove', onMouseMove);

            container.addEventListener('mouseup', onMouseUp);

            container.addEventListener('mouseleave', onMouseUp);

            

            // Add touch controls for mobile

            container.addEventListener('touchstart', onTouchStart);

            container.addEventListener('touchmove', onTouchMove);

            container.addEventListener('touchend', onTouchEnd);

            

            // Add scroll zoom

            container.addEventListener('wheel', onMouseWheel);

            

            // Start animation

            animate3DEarth();

        }

        

        function onMouseDown(event) {

            isMouseDown = true;

            previousMousePosition = {

                x: event.clientX,

                y: event.clientY

            };

        }

        

        function onMouseMove(event) {

            if (isMouseDown) {

                const deltaMove = {

                    x: event.clientX - previousMousePosition.x,

                    y: event.clientY - previousMousePosition.y

                };

                

                targetRotationY += deltaMove.x * 0.01;

                targetRotationX += deltaMove.y * 0.01;

                

                previousMousePosition = {

                    x: event.clientX,

                    y: event.clientY

                };

            }

        }

        

        function onMouseUp() {

            isMouseDown = false;

        }

        

        function onTouchStart(event) {

            if (event.touches.length === 1) {

                isMouseDown = true;

                previousMousePosition = {

                    x: event.touches[0].clientX,

                    y: event.touches[0].clientY

                };

            }

        }

        

        function onTouchMove(event) {

            if (event.touches.length === 1 && isMouseDown) {

                event.preventDefault();

                const deltaMove = {

                    x: event.touches[0].clientX - previousMousePosition.x,

                    y: event.touches[0].clientY - previousMousePosition.y

                };

                

                targetRotationY += deltaMove.x * 0.01;

                targetRotationX += deltaMove.y * 0.01;

                

                previousMousePosition = {

                    x: event.touches[0].clientX,

                    y: event.touches[0].clientY

                };

            }

        }

        

        function onTouchEnd() {

            isMouseDown = false;

        }

        

        function onMouseWheel(event) {

            event.preventDefault();

            const delta = event.deltaY * 0.001;

            camera.position.z = Math.max(1.5, Math.min(4, camera.position.z + delta));

        }

        

        function animate3DEarth() {

            requestAnimationFrame(animate3DEarth);

            

            // Auto-rotate when not interacting

            if (!isMouseDown) {

                targetRotationY += 0.002;

            }

            

            // Smooth rotation

            earthGroup.rotation.x += (targetRotationX - earthGroup.rotation.x) * 0.05;

            earthGroup.rotation.y += (targetRotationY - earthGroup.rotation.y) * 0.05;

            

            // Limit vertical rotation

            earthGroup.rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, earthGroup.rotation.x));

            

            // Rotate clouds slightly faster than Earth

            if (clouds) {

                clouds.rotation.y += 0.0005;

            }

            

            renderer.render(scene, camera);

        }

        

        // Initialize 3D Earth when page loads

        window.addEventListener('load', init3DEarth);

        

        // Handle window resize

        window.addEventListener('resize', () => {

            const container = document.getElementById('globe-container');

            const width = container.clientWidth;

            const height = container.clientHeight;

            

            if (camera && renderer) {

                camera.aspect = width / height;

                camera.updateProjectionMatrix();

                renderer.setSize(width, height);

            }

        });

        

        // Custom Data Query functionality

        document.getElementById('queryForm').addEventListener('submit', async function(e) {

            e.preventDefault();

            

            // Get form values

            const date = document.getElementById('date').value;

            const location = document.getElementById('location').value;

            const latitude = parseFloat(document.getElementById('latitude').value);

            const longitude = parseFloat(document.getElementById('longitude').value);

            const dataset = document.getElementById('dataset').value;

            const area = parseFloat(document.getElementById('area').value);

            

            // Validate inputs

            if (!date || !location || isNaN(latitude) || isNaN(longitude) || !dataset) {

                showError('Please fill in all required fields with valid values.');

                return;

            }

            

            // Validate latitude and longitude ranges

            if (latitude < -90 || latitude > 90) {

                showError('Latitude must be between -90 and 90 degrees.');

                return;

            }

            

            if (longitude < -180 || longitude > 180) {

                showError('Longitude must be between -180 and 180 degrees.');

                return;

            }

            

            // Hide any previous error messages

            hideError();

            

            // Show loading state

            const queryResult = document.getElementById('queryResult');

            queryResult.classList.remove('active');

            

            // Fetch data based on query

            try {

                const data = await fetchCustomData(date, latitude, longitude, dataset, area);

                displayQueryResult(data, date, location, latitude, longitude, dataset);

            } catch (error) {

                showError(`Error fetching data: ${error.message}`);

            }

        });

        

        // Fetch custom data from NASA API

        async function fetchCustomData(date, lat, lon, dataset, area) {

            try {

                // Get additional data based on dataset

                let additionalData = {};

                

                try {

                    switch(dataset) {

                        case 'temperature':

                            additionalData = await fetchTemperatureForLocation(lat, lon, date);

                            break;

                        case 'vegetation':

                            additionalData = await fetchNDVIForLocation(lat, lon, date);

                            break;

                        case 'aerosol':

                            additionalData = await fetchAODForLocation(lat, lon, date);

                            break;

                        case 'water_vapor':

                            additionalData = await fetchWaterVaporForLocation(lat, lon, date);

                            break;

                        case 'clouds':

                            additionalData = await fetchCloudDataForLocation(lat, lon, date);

                            break;

                    }

                } catch (error) {

                    console.error('Error fetching additional data:', error);

                    // Use mock data if additional data fetch fails

                    additionalData = {

                        value: generateMockValue(dataset),

                        unit: getUnitForDataset(dataset),

                        quality: 'Good'

                    };

                }

                

                return {

                    date: date,

                    dataset: dataset,

                    value: additionalData.value || generateMockValue(dataset),

                    unit: additionalData.unit || getUnitForDataset(dataset),

                    quality: additionalData.quality || 'Good'

                };

            } catch (error) {

                console.error('Error fetching custom data:', error);

                // Return mock data if API fails

                return {

                    date: date,

                    dataset: dataset,

                    value: generateMockValue(dataset),

                    unit: getUnitForDataset(dataset),

                    quality: 'Good'

                };

            }

        }

        

        // Fetch temperature data for specific location

        async function fetchTemperatureForLocation(lat, lon, date) {

            try {

                // Using NASA POWER API for temperature data

                const startDate = new Date(date);

                const endDate = new Date(date);

                endDate.setDate(endDate.getDate() + 1);

                

                const url = `https://power.larc.nasa.gov/api/temporal/daily/point?start=${formatDateForAPI(startDate)}&end=${formatDateForAPI(endDate)}&latitude=${lat}&longitude=${lon}&community=SB&parameters=T2M&format=JSON`;

                

                const response = await fetch(url);

                

                if (!response.ok) {

                    throw new Error(`NASA POWER API request failed: ${response.status}`);

                }

                

                const data = await response.json();

                

                if (data && data.properties && data.properties.parameter && data.properties.parameter.T2M) {

                    const tempData = data.properties.parameter.T2M;

                    const dateKey = formatDateForAPI(startDate);

                    const temperature = tempData[dateKey];

                    

                    return {

                        value: temperature ? temperature.toFixed(2) : generateMockValue('temperature'),

                        unit: '°C',

                        quality: 'Good'

                    };

                } else {

                    throw new Error('Invalid temperature data format');

                }

            } catch (error) {

                console.error('Error fetching temperature data:', error);

                throw error;

            }

        }

        

        // Fetch NDVI data for specific location

        async function fetchNDVIForLocation(lat, lon, date) {

            try {

                // Using MODIS NDVI data from NASA's Earthdata

                // This is a simplified example - in a real application, you would need to authenticate with Earthdata

                

                // For demonstration, we'll use a public dataset

                const url = `https://modis.gsfc.nasa.gov/data/dataprod/mod13.php`;

                

                // Since we can't directly query the API without authentication, we'll return mock data

                // In a real application, you would use NASA's Earthdata API with proper authentication

                

                return {

                    value: generateMockValue('vegetation'),

                    unit: 'NDVI',

                    quality: 'Good'

                };

            } catch (error) {

                console.error('Error fetching NDVI data:', error);

                throw error;

            }

        }

        

        // Fetch Aerosol Optical Depth data for specific location

        async function fetchAODForLocation(lat, lon, date) {

            try {

                // Using MODIS AOD data from NASA's Earthdata

                // This is a simplified example - in a real application, you would need to authenticate with Earthdata

                

                // For demonstration, we'll use a public dataset

                const url = `https://modis.gsfc.nasa.gov/data/dataprod/mod04.php`;

                

                // Since we can't directly query the API without authentication, we'll return mock data

                // In a real application, you would use NASA's Earthdata API with proper authentication

                

                return {

                    value: generateMockValue('aerosol'),

                    unit: 'AOD',

                    quality: 'Good'

                };

            } catch (error) {

                console.error('Error fetching AOD data:', error);

                throw error;

            }

        }

        

        // Fetch Water Vapor data for specific location

        async function fetchWaterVaporForLocation(lat, lon, date) {

            try {

                // Using MODIS Water Vapor data from NASA's Earthdata

                // This is a simplified example - in a real application, you would need to authenticate with Earthdata

                

                // For demonstration, we'll use a public dataset

                const url = `https://modis.gsfc.nasa.gov/data/dataprod/mod05.php`;

                

                // Since we can't directly query the API without authentication, we'll return mock data

                // In a real application, you would use NASA's Earthdata API with proper authentication

                

                return {

                    value: generateMockValue('water_vapor'),

                    unit: 'g/kg',

                    quality: 'Good'

                };

            } catch (error) {

                console.error('Error fetching Water Vapor data:', error);

                throw error;

            }

        }

        

        // Fetch Cloud data for specific location

        async function fetchCloudDataForLocation(lat, lon, date) {

            try {

                // Using MODIS Cloud data from NASA's Earthdata

                // This is a simplified example - in a real application, you would need to authenticate with Earthdata

                

                // For demonstration, we'll use a public dataset

                const url = `https://modis.gsfc.nasa.gov/data/dataprod/mod06.php`;

                

                // Since we can't directly query the API without authentication, we'll return mock data

                // In a real application, you would use NASA's Earthdata API with proper authentication

                

                return {

                    value: generateMockValue('clouds'),

                    unit: '%',

                    quality: 'Good'

                };

            } catch (error) {

                console.error('Error fetching Cloud data:', error);

                throw error;

            }

        }

        

        // Format date for API

        function formatDateForAPI(date) {

            const year = date.getFullYear();

            const month = String(date.getMonth() + 1).padStart(2, '0');

            const day = String(date.getDate()).padStart(2, '0');

            return `${year}${month}${day}`;

        }

        

        // Generate a mock value based on dataset

        function generateMockValue(dataset) {

            switch(dataset) {

                case 'temperature':

                    return (Math.random() * 40 - 10).toFixed(2); // -10 to 30°C

                case 'vegetation':

                    return (Math.random() * 0.8 + 0.2).toFixed(3); // 0.2 to 1.0

                case 'aerosol':

                    return (Math.random() * 1.0).toFixed(3); // 0 to 1.0

                case 'water_vapor':

                    return (Math.random() * 50).toFixed(2); // 0 to 50 g/kg

                case 'clouds':

                    return (Math.random() * 100).toFixed(1); // 0 to 100%

                default:

                    return (Math.random() * 100).toFixed(2);

            }

        }

        

        // Get unit for dataset

        function getUnitForDataset(dataset) {

            switch(dataset) {

                case 'temperature':

                    return '°C';

                case 'vegetation':

                    return 'NDVI';

                case 'aerosol':

                    return 'AOD';

                case 'water_vapor':

                    return 'g/kg';

                case 'clouds':

                    return '%';

                default:

                    return 'units';

            }

        }

        

        // Display query results

        function displayQueryResult(data, date, location, lat, lon, dataset) {

            // Update result elements

            document.getElementById('resultTitle').textContent = 'Query Results';

            document.getElementById('resultDate').textContent = new Date(date).toLocaleDateString('en-US', { 

                year: 'numeric', 

                month: 'long', 

                day: 'numeric' 

            });

            document.getElementById('resultLocation').textContent = location;

            document.getElementById('resultCoords').textContent = `${lat.toFixed(4)}°, ${lon.toFixed(4)}°`;

            document.getElementById('resultDataset').textContent = formatDatasetName(dataset);

            document.getElementById('resultValue').textContent = data.value;

            document.getElementById('resultUnit').textContent = data.unit;

            document.getElementById('resultQuality').textContent = data.quality;

            

            // Show the result section

            document.getElementById('queryResult').classList.add('active');

            

            // Scroll to results

            setTimeout(() => {

                document.getElementById('queryResult').scrollIntoView({ 

                    behavior: 'smooth', 

                    block: 'nearest' 

                });

            }, 100);

        }

        

        // Format dataset name for display

        function formatDatasetName(dataset) {

            switch(dataset) {

                case 'temperature':

                    return 'Land Surface Temperature';

                case 'vegetation':

                    return 'Vegetation Index (NDVI)';

                case 'aerosol':

                    return 'Aerosol Optical Depth';

                case 'water_vapor':

                    return 'Atmospheric Water Vapor';

                case 'clouds':

                    return 'Cloud Properties';

                default:

                    return dataset;

            }

        }

        

        // Show error message

        function showError(message) {

            const errorElement = document.getElementById('errorMessage');

            errorElement.textContent = message;

            errorElement.classList.add('active');

        }

        

        // Hide error message

        function hideError() {

            const errorElement = document.getElementById('errorMessage');

            errorElement.classList.remove('active');

        }

        

        // Set default date to today

        document.addEventListener('DOMContentLoaded', function() {

            const today = new Date().toISOString().split('T')[0];

            document.getElementById('date').value = today;

            

            // Set max date to today

            document.getElementById('date').max = today;

            

            // Set min date to Terra launch date (1999-12-18)

            document.getElementById('date').min = '1999-12-18';

        });

    </script>

</body>

</html> explain this code



This HTML, CSS, and JavaScript code creates a visually engaging, single-page website dedicated to the NASA Terra Satellite Mission, celebrating its 25 years of Earth observation.

The design uses a dark, space-themed aesthetic with blue/cyan accents, featuring a dynamic 3D globe, interactive data charts powered by Chart.js, and a simulated Custom Data Query tool. The JavaScript orchestrates animations, loads external data (or mock data if APIs are restricted/fail), and manages user interactions.

1. Structure (HTML)
The HTML is divided into clear, semantic sections linked by a navigation bar:

header: Contains the main logo and navigation links.

.loading-overlay: A splash screen with a spinner that appears before the content loads.

section.hero (#home): The main landing page with the mission title and the interactive 3D Earth Globe.

.sticky-instruments: A floating navigation bar (appears on scroll) featuring the five Terra instruments: ASTER, CERES, MISR, MODIS, and MOPITT.

section.data-visualization (#data): Holds the long-term trend charts for Temperature, CO 
2
​
 , Ice Coverage, and Vegetation.

section.custom-data-query (#query): Contains a form to simulate querying Terra data for specific coordinates and datasets.

section.impact-story (#impact): Displays three major areas where Terra data has real-world impact, each with a "Learn More" modal trigger.

footer: Includes copyright info and social media links.

.modal: A hidden element used to display detailed "Learn More" content.

2. Styling (CSS)
The CSS creates a professional, space-themed interface:

Color Scheme: Dominated by deep blues (#0a0e27, #0d47a1, #1a237e) and highlighted with bright cyan/blue (#4fc3f7, #29b6f6) for a high-tech, data-driven feel.

Animations:

.stars: Generates a cosmic background with twinkling stars using the @keyframes twinkle animation.

.heat-overlay: Creates a red-orange pulse effect on the 3D globe via the @keyframes pulse animation, symbolizing temperature or energy data.

.timeline-progress: A continuous animation (@keyframes progress) across the timeline bar to represent ongoing data collection.

.loader: A spinning CSS animation (@keyframes spin) for loading indicators.

Responsiveness: The @media (max-width: 768px) block adjusts the layout for smaller screens, collapsing the header navigation and simplifying some grid layouts.

Sticky Elements: The .sticky-instruments menu is initially off-screen (top: -100px;) and slides into view when the user scrolls past the hero section (controlled by JavaScript).

3. Interactivity (JavaScript)
The JavaScript file (<script>) handles all dynamic features, relying on Chart.js for the 2D graphs and Three.js for the 3D globe.

3.1. 3D Globe (Three.js)
init3DEarth(): Initializes the 3D scene, camera, renderer, and adds the spherical Earth, atmospheric glow (THREE.ShaderMaterial), and clouds.

Interaction Handlers: Functions like onMouseDown, onMouseMove, and onMouseWheel allow the user to rotate and zoom the globe.

animate3DEarth(): The main render loop provides a smooth, continuous auto-rotation when the user isn't interacting.

3.2. Data Visualization (Chart.js & Mock APIs)
fetchNASAData(): The core function that attempts to load data for the main charts:

Temperature: Fetches from a NOAA/NASA GISTEMP CSV data link.

CO 
2
​
 : Fetches from a NOAA CO 
2
​
  trend CSV link.

Ice Coverage: Attempts to use NSIDC data, but falls back to a public GitHub CSV.

Vegetation (NDVI): Attempts to use a public GitHub CSV.

Crucially: Due to real NASA API key and CORS restrictions, most data fetching logic includes robust mock data fallbacks (getMockData()) to ensure the charts display sample data and trends even if the live external API calls fail.

initCharts(): Initializes the four primary line charts using the fetched (or mock) historical data, setting colors, labels, and responsiveness.

showViz(vizType): Controls the button group, switching the active chart displayed on the screen.

3.3. Custom Query Simulation
queryForm Listener: Captures user input (date, location, lat/lon, dataset).

fetchCustomData(): Simulates a data retrieval process:

It uses the NASA POWER API endpoint (power.larc.nasa.gov) for a more realistic mock of Temperature data fetching, formatting the date correctly.

For other datasets (Vegetation, Aerosol, Water Vapor, Clouds), it relies on purely random mock values (generateMockValue()) as direct, unauthenticated API access to specific Terra instrument data (like MODIS AOD) is complex and restricted.

displayQueryResult(): Populates the hidden result panel with the requested parameters and the simulated/fetched data value, unit, and quality.

3.4. Utility Functions
scrollToSection(): Provides smooth scrolling navigation.

openModal() / closeModal(): Manages the display of the pop-up boxes for the "Impact" section, dynamically loading text content based on the selected topic.

Sticky Navigation Logic: Event listeners manage the sticky-instruments menu, making it visible after the user scrolls 200 pixels down.








<!DOCTYPE html>

<html lang="en">

<head>

    <meta charset="UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>TerraForge: 25 Years of Earth Science</title>

    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

    <style>

        * {

            margin: 0;

            padding: 0;

            box-sizing: border-box;

        }

        

        body {

            font-family: 'Roboto', sans-serif;

            background-color: #0a0e27;

            color: #ffffff;

            overflow-x: hidden;

        }

        

        header {

            padding: 20px 40px;

            background: linear-gradient(90deg, #0a0e27 0%, #1a237e 100%);

            display: flex;

            justify-content: space-between;

            align-items: center;

            position: relative;

            z-index: 100;

        }

        

        .logo {

            display: flex;

            align-items: center;

        }

        

        .logo i {

            font-size: 2rem;

            margin-right: 15px;

            color: #4fc3f7;

        }

        

        .logo h1 {

            font-size: 1.8rem;

            font-weight: 500;

        }

        

        .logo span {

            font-size: 0.9rem;

            color: #90caf9;

            display: block;

        }

        

        nav {

            display: flex;

        }

        

        nav a {

            color: #ffffff;

            text-decoration: none;

            margin: 0 15px;

            padding: 8px 15px;

            border-radius: 20px;

            transition: all 0.3s ease;

        }

        

        nav a:hover, nav a.active {

            background-color: rgba(79, 195, 247, 0.2);

        }

        

        .hero {

            min-height: 100vh;

            position: relative;

            display: flex;

            flex-direction: column;

            justify-content: center;

            align-items: center;

            text-align: center;

            padding: 0 20px 100px;

            background: radial-gradient(ellipse at bottom, #1b2735 0%, #090a0f 100%);

            overflow: hidden;

        }

        

        .stars {

            position: absolute;

            top: 0;

            left: 0;

            width: 100%;

            height: 100%;

            pointer-events: none;

        }

        

        .star {

            position: absolute;

            width: 2px;

            height: 2px;

            background: white;

            border-radius: 50%;

            animation: twinkle 4s infinite;

        }

        

        @keyframes twinkle {

            0%, 100% { opacity: 0.2; }

            50% { opacity: 1; }

        }

        

        .hero-content {

            position: relative;

            z-index: 10;

            max-width: 800px;

        }

        

        .hero h2 {

            font-size: 3rem;

            margin-bottom: 20px;

            font-weight: 700;

            background: linear-gradient(90deg, #4fc3f7, #29b6f6);

            -webkit-background-clip: text;

            background-clip: text;

            color: transparent;

        }

        

        .hero p {

            font-size: 1.2rem;

            margin-bottom: 30px;

            line-height: 1.6;

            color: #b3e5fc;

        }

        

        .btn {

            display: inline-block;

            padding: 12px 30px;

            background: linear-gradient(90deg, #29b6f6, #0288d1);

            color: white;

            text-decoration: none;

            border-radius: 30px;

            font-weight: 500;

            transition: all 0.3s ease;

            border: none;

            cursor: pointer;

            font-size: 1rem;

        }

        

        .btn:hover {

            transform: translateY(-3px);

            box-shadow: 0 10px 20px rgba(41, 182, 246, 0.3);

        }

        

        .data-visualization {

            padding: 80px 20px;

            background: linear-gradient(180deg, #0d47a1 0%, #0a0e27 100%);

            position: relative;

        }

        

        .container {

            max-width: 1200px;

            margin: 0 auto;

        }

        

        .section-title {

            text-align: center;

            margin-bottom: 60px;

        }

        

        .section-title h2 {

            font-size: 2.5rem;

            margin-bottom: 15px;

            color: #4fc3f7;

        }

        

        .section-title p {

            font-size: 1.1rem;

            color: #b3e5fc;

            max-width: 700px;

            margin: 0 auto;

        }

        

        .viz-container {

            display: flex;

            flex-direction: column;

            align-items: center;

            gap: 40px;

        }

        

        .viz-controls {

            display: flex;

            gap: 20px;

            margin-bottom: 20px;

        }

        

        .viz-btn {

            padding: 10px 20px;

            background: rgba(255, 255, 255, 0.1);

            border: 1px solid rgba(79, 195, 247, 0.3);

            color: white;

            border-radius: 25px;

            cursor: pointer;

            transition: all 0.3s ease;

        }

        

        .viz-btn:hover, .viz-btn.active {

            background: rgba(41, 182, 246, 0.3);

            border-color: #29b6f6;

        }

        

        .viz-display {

            width: 100%;

            max-width: 900px;

            height: 400px;

            background: rgba(0, 0, 0, 0.3);

            border-radius: 15px;

            position: relative;

            overflow: hidden;

            border: 1px solid rgba(79, 195, 247, 0.2);

        }

        

        .viz-content {

            width: 100%;

            height: 100%;

            display: none;

            padding: 20px;

        }

        

        .viz-content.active {

            display: block;

        }

        

        .chart-container {

            width: 100%;

            height: 100%;

            position: relative;

        }

        

        .chart {

            width: 100%;

            height: 100%;

        }

        

        .timeline {

            position: relative;

            padding: 20px 0;

            margin-top: 40px;

            width: 100%;

            max-width: 900px;

        }

        

        .timeline-track {

            height: 4px;

            background: rgba(255, 255, 255, 0.1);

            position: relative;

            margin: 40px 0;

        }

        

        .timeline-progress {

            height: 100%;

            width: 0%;

            background: linear-gradient(90deg, #29b6f6, #4fc3f7);

            animation: progress 10s linear infinite;

        }

        

        @keyframes progress {

            0% { width: 0%; }

            100% { width: 100%; }

        }

        

        .timeline-markers {

            display: flex;

            justify-content: space-between;

            position: relative;

            margin-top: -30px;

        }

        

        .timeline-marker {

            text-align: center;

            position: relative;

        }

        

        .timeline-marker::before {

            content: '';

            position: absolute;

            top: -15px;

            left: 50%;

            transform: translateX(-50%);

            width: 10px;

            height: 10px;

            border-radius: 50%;

            background: #4fc3f7;

        }

        

        .timeline-marker span {

            display: block;

            margin-top: 10px;

            font-size: 0.9rem;

            color: #b3e5fc;

        }

        

        .loading-overlay {

            position: fixed;

            top: 0;

            left: 0;

            width: 100%;

            height: 100%;

            background: rgba(10, 14, 39, 0.9);

            display: flex;

            justify-content: center;

            align-items: center;

            z-index: 100;

            opacity: 1;

            transition: opacity 0.5s ease;

        }

        

        .loading-overlay.hidden {

            opacity: 0;

            pointer-events: none;

        }

        

        .loader {

            width: 60px;

            height: 60px;

            border: 5px solid rgba(79, 195, 247, 0.2);

            border-top-color: #4fc3f7;

            border-radius: 50%;

            animation: spin 1s linear infinite;

        }

        

        @keyframes spin {

            to { transform: rotate(360deg); }

        }

        

        .data-loading {

            position: absolute;

            top: 50%;

            left: 50%;

            transform: translate(-50%, -50%);

            display: flex;

            flex-direction: column;

            align-items: center;

            gap: 15px;

            color: #4fc3f7;

        }

        

        .data-loading .loader {

            width: 40px;

            height: 40px;

        }

        

        .data-loading p {

            font-size: 0.9rem;

        }

        

        .earth-info {

            position: absolute;

            bottom: 20px;

            left: 50%;

            transform: translateX(-50%);

            text-align: center;

            color: #b3e5fc;

            font-size: 0.9rem;

            z-index: 10;

        }

        

        /* Sticky Instrument Navigation */

        .sticky-instruments {

            position: fixed;

            top: -100px;

            left: 0;

            width: 100%;

            background: linear-gradient(90deg, rgba(10, 14, 39, 0.95) 0%, rgba(26, 35, 126, 0.95) 100%);

            backdrop-filter: blur(10px);

            padding: 15px 0;

            z-index: 99;

            transition: top 0.3s ease;

            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);

        }

        

        .sticky-instruments.visible {

            top: 0;

        }

        

        .sticky-instruments-container {

            max-width: 1200px;

            margin: 0 auto;

            padding: 0 20px;

            display: flex;

            justify-content: center;

            align-items: center;

            gap: 20px;

            overflow-x: auto;

        }

        

        .sticky-instrument-card {

            display: flex;

            flex-direction: column;

            align-items: center;

            min-width: 120px;

            padding: 10px;

            background: rgba(255, 255, 255, 0.05);

            border-radius: 10px;

            cursor: pointer;

            transition: all 0.3s ease;

            border: 1px solid rgba(79, 195, 247, 0.2);

        }

        

        .sticky-instrument-card:hover {

            background: rgba(255, 255, 255, 0.1);

            transform: translateY(-5px);

        }

        

        .sticky-instrument-card.active {

            background: rgba(41, 182, 246, 0.2);

            border-color: #29b6f6;

        }

        

        .sticky-instrument-icon {

            font-size: 1.8rem;

            margin-bottom: 5px;

            color: #4fc3f7;

        }

        

        .sticky-instrument-card h3 {

            font-size: 0.9rem;

            color: #ffffff;

            margin: 0;

        }

        

        /* Custom Data Query Section */

        .custom-data-query {

            padding: 80px 20px;

            background: linear-gradient(180deg, #0d47a1 0%, #0a0e27 100%);

            position: relative;

        }

        

        .query-container {

            max-width: 900px;

            margin: 0 auto;

            background: rgba(0, 0, 0, 0.3);

            border-radius: 15px;

            padding: 40px;

            border: 1px solid rgba(79, 195, 247, 0.2);

        }

        

        .query-form {

            display: grid;

            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));

            gap: 25px;

            margin-bottom: 30px;

        }

        

        .location-section {

            margin-bottom: 30px;

            padding: 20px;

            background: rgba(0, 0, 0, 0.2);

            border-radius: 10px;

            border: 1px solid rgba(79, 195, 247, 0.1);

        }

        

        .location-header {

            display: flex;

            align-items: center;

            margin-bottom: 15px;

        }

        

        .location-header h3 {

            color: #4fc3f7;

            font-size: 1.2rem;

            margin-right: 10px;

        }

        

        .location-indicator {

            width: 12px;

            height: 12px;

            border-radius: 50%;

            margin-right: 8px;

            background-color: #ff5722;

        }

        

        .form-group {

            display: flex;

            flex-direction: column;

        }

        

        .form-group label {

            margin-bottom: 8px;

            color: #4fc3f7;

            font-weight: 500;

        }

        

        .form-group input,

        .form-group select {

            padding: 12px 15px;

            background: rgba(255, 255, 255, 0.1);

            border: 1px solid rgba(79, 195, 247, 0.3);

            border-radius: 8px;

            color: white;

            font-size: 1rem;

            transition: all 0.3s ease;

        }

        

        .form-group input:focus,

        .form-group select:focus {

            outline: none;

            border-color: #29b6f6;

            background: rgba(255, 255, 255, 0.15);

        }

        

        .form-group select option {

            background: #0a0e27;

        }

        

        .form-actions {

            display: flex;

            justify-content: center;

            margin-top: 20px;

        }

        

        .query-result {

            margin-top: 40px;

            padding: 30px;

            background: rgba(0, 0, 0, 0.2);

            border-radius: 15px;

            border: 1px solid rgba(79, 195, 247, 0.2);

            display: none;

        }

        

        .query-result.active {

            display: block;

        }

        

        .result-header {

            display: flex;

            justify-content: space-between;

            align-items: center;

            margin-bottom: 20px;

            padding-bottom: 15px;

            border-bottom: 1px solid rgba(79, 195, 247, 0.2);

        }

        

        .result-header h3 {

            color: #4fc3f7;

            font-size: 1.5rem;

        }

        

        .result-date {

            color: #b3e5fc;

            font-size: 0.9rem;

        }

        

        .result-content {

            display: grid;

            grid-template-columns: 1fr 1fr;

            gap: 30px;

        }

        

        .result-visualization {

            display: flex;

            flex-direction: column;

            align-items: center;

            gap: 15px;

        }

        

        .data-globe-container {

            position: relative;

            width: 300px;

            height: 300px;

            perspective: 1000px;

            display: flex;

            justify-content: center;

            align-items: center;

        }

        

        .data-globe-info {

            text-align: center;

            color: #b3e5fc;

            font-size: 0.9rem;

        }

        

        .layer-controls {

            display: flex;

            flex-wrap: wrap;

            justify-content: center;

            gap: 10px;

            margin-top: 15px;

        }

        

        .layer-control {

            display: flex;

            align-items: center;

            gap: 5px;

            padding: 5px 10px;

            background: rgba(255, 255, 255, 0.1);

            border-radius: 20px;

            font-size: 0.8rem;

        }

        

        .layer-indicator {

            width: 12px;

            height: 12px;

            border-radius: 50%;

        }

        

        .result-data {

            display: flex;

            flex-direction: column;

            gap: 15px;

        }

        

        .data-item {

            display: flex;

            justify-content: space-between;

            padding: 15px;

            background: rgba(255, 255, 255, 0.05);

            border-radius: 8px;

            transition: all 0.3s ease;

        }

        

        .data-item:hover {

            background: rgba(255, 255, 255, 0.1);

            transform: translateY(-2px);

        }

        

        .data-label {

            color: #b3e5fc;

            font-weight: 500;

        }

        

        .data-value {

            color: #ffffff;

            font-weight: 500;

        }

        

        .error-message {

            color: #ff5252;

            padding: 15px;

            background: rgba(255, 82, 82, 0.1);

            border-radius: 8px;

            margin-top: 20px;

            display: none;

        }

        

        .error-message.active {

            display: block;

        }

        

        .api-info {

            margin-top: 20px;

            padding: 15px;

            background: rgba(79, 195, 247, 0.1);

            border-radius: 8px;

            border-left: 4px solid #4fc3f7;

        }

        

        .api-info p {

            color: #b3e5fc;

            font-size: 0.9rem;

            margin: 0;

        }

        

        .api-info a {

            color: #4fc3f7;

            text-decoration: none;

        }

        

        .api-info a:hover {

            text-decoration: underline;

        }

        

        /* Data visualization bar */

        .data-visualization-bar {

            width: 100%;

            height: 60px;

            background: rgba(0, 0, 0, 0.3);

            border-radius: 8px;

            margin-bottom: 15px;

            position: relative;

            overflow: hidden;

        }

        

        .data-gradient {

            height: 100%;

            width: 100%;

            background: linear-gradient(90deg, #0377ff, #ff0000);

            border-radius: 8px;

            position: relative;

        }

        

        .data-extremes {

            position: absolute;

            top: 0;

            width: 100%;

            height: 100%;

            display: flex;

            justify-content: space-between;

            padding: 0 15px;

            align-items: center;

            color: white;

            font-size: 0.9rem;

            font-weight: 500;

        }

        

        .data-extreme {

            display: flex;

            flex-direction: column;

            align-items: center;

            text-align: center;

        }

        

        .data-extreme-value {

            font-size: 1.2rem;

            font-weight: 700;

            margin-bottom: 5px;

        }

        

        .data-extreme-label {

            font-size: 0.8rem;

            opacity: 0.8;

        }

        

        .data-extreme.high {

            color: #ff5252;

        }

        

        .data-extreme.low {

            color: #2196f3;

        }

        

        .data-pixels {

            position: absolute;

            top: 0;

            left: 0;

            width: 100%;

            height: 100%;

            display: flex;

            flex-wrap: wrap;

            padding: 5px;

            gap: 2px;

        }

        

        .data-pixel {

            width: calc(100% / 20 - 2px);

            height: calc(100% - 2px);

            border-radius: 2px;

            transition: all 0.3s ease;

        }

        

        /* Globe container and data visualization */

        .globe-container {

            position: relative;

            width: 500px;

            height: 500px;

            margin: 20px 0;

            perspective: 1000px;

            display: flex;

            justify-content: center;

            align-items: center;

        }

        

        .globe {

            width: 100%;

            height: 100%;

            border-radius: 50%;

            box-shadow: 0 0 50px rgba(79, 195, 247, 0.5), inset -20px -20px 40px rgba(0, 0, 0, 0.5);

            position: relative;

            overflow: hidden;

        }

        

        .globe-overlay {

            position: absolute;

            top: 0;

            left: 0;

            width: 100%;

            height: 100%;

            border-radius: 50%;

            background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.1), transparent 40%);

            pointer-events: none;

        }

        

        .heat-overlay {

            position: absolute;

            top: 0;

            left: 0;

            width: 100%;

            height: 100%;

            border-radius: 50%;

            background: radial-gradient(circle at 70% 50%, rgba(255, 87, 34, 0.4), transparent 60%);

            opacity: 0;

            animation: pulse 4s ease-in-out infinite;

        }

        

        @keyframes pulse {

            0%, 100% { opacity: 0.3; }

            50% { opacity: 0.7; }

        }

        

        /* World Map Section */

        .world-map-section {

            padding: 40px 20px;

            background: linear-gradient(180deg, #0d47a1 0%, #0a0e27 100%);

            position: relative;

        }

        

        .world-map-container {

            max-width: 900px;

            margin: 0 auto;

            background: rgba(0, 0, 0, 0.3);

            border-radius: 15px;

            padding: 20px;

            border: 1px solid rgba(79, 195, 247, 0.2);

        }

        

        .world-map-title {

            text-align: center;

            margin-bottom: 20px;

            color: #4fc3f7;

            font-size: 1.5rem;

        }

        

        #worldMap {

            height: 400px;

            border-radius: 10px;

            overflow: hidden;

        }

        

        .map-legend {

            display: flex;

            justify-content: center;

            margin-top: 15px;

            gap: 20px;

        }

        

        .legend-item {

            display: flex;

            align-items: center;

            gap: 8px;

            font-size: 0.9rem;

            color: #b3e5fc;

        }

        

        .legend-color {

            width: 15px;

            height: 15px;

            border-radius: 3px;

        }

        

        @media (max-width: 768px) {

            .hero h2 {

                font-size: 2rem;

            }

            

            .globe-container {

                width: 300px;

                height: 300px;

            }

            

            nav {

                display: none;

            }

            

            .sticky-instruments-container {

                padding: 0 10px;

                gap: 10px;

            }

            

            .sticky-instrument-card {

                min-width: 100px;

                padding: 8px;

            }

            

            .sticky-instrument-icon {

                font-size: 1.5rem;

            }

            

            .sticky-instrument-card h3 {

                font-size: 0.8rem;

            }

            

            .query-form {

                grid-template-columns: 1fr;

            }

            

            .result-content {

                grid-template-columns: 1fr;

            }

            

            .data-globe-container {

                width: 250px;

                height: 250px;

            }

            

            #worldMap {

                height: 300px;

            }

        }

    </style>

</head>

<body>

    <div class="loading-overlay" id="loadingOverlay">

        <div class="loader"></div>

    </div>

    

    <header>

        <div class="logo">

            <i class="fas fa-satellite"></i>

            <div>

                <h1>TERRAFORGE</h1>

                <span>25 Years of Earth Observation</span>

            </div>

        </div>

        <nav>

            <a href="#home" class="active">Home</a>

            <a href="#data">Data</a>

            <a href="#query">Query</a>

        </nav>

    </header>

    

    <!-- Sticky Instrument Navigation -->

    <div class="sticky-instruments" id="stickyInstruments">

        <div class="sticky-instruments-container">

            <div class="sticky-instrument-card" onclick="selectStickyInstrument('aster')">

                <div class="sticky-instrument-icon">

                    <i class="fas fa-mountain"></i>

                </div>

                <h3>ASTER</h3>

            </div>

            <div class="sticky-instrument-card" onclick="selectStickyInstrument('ceres')">

                <div class="sticky-instrument-icon">

                    <i class="fas fa-cloud-sun"></i>

                </div>

                <h3>CERES</h3>

            </div>

            <div class="sticky-instrument-card" onclick="selectStickyInstrument('misr')">

                <div class="sticky-instrument-icon">

                    <i class="fas fa-camera"></i>

                </div>

                <h3>MISR</h3>

            </div>

            <div class="sticky-instrument-card" onclick="selectStickyInstrument('modis')">

                <div class="sticky-instrument-icon">

                    <i class="fas fa-globe-americas"></i>

                </div>

                <h3>MODIS</h3>

            </div>

            <div class="sticky-instrument-card" onclick="selectStickyInstrument('mopitt')">

                <div class="sticky-instrument-icon">

                    <i class="fas fa-smog"></i>

                </div>

                <h3>MOPITT</h3>

            </div>

        </div>

    </div>

    

    <section class="hero" id="home">

        <div class="stars" id="stars"></div>

        <div class="hero-content">

            <h2>25 Years of Watching Our Earth</h2>

            <p>TerraForge has been continuously observing our planet for a quarter century, collecting vital data on Earth's atmosphere, land, oceans, and energy balance. Explore how this data reveals our changing world and impacts us all.</p>

            <button class="btn" onclick="scrollToSection('data')">Explore Data</button>

        </div>

        

        <div class="globe-container" id="globe-container">

            <div class="globe">

                <div class="globe-overlay"></div>

                <div class="heat-overlay"></div>

            </div>

            <div class="earth-info">Drag to rotate • Scroll to zoom</div>

        </div>

    </section>

    

    <section class="data-visualization" id="data">

        <div class="container">

            <div class="section-title">

                <h2>Earth Science Data Visualizations</h2>

                <p>Explore 25 years of TerraForge data to understand changes in our planet's systems</p>

            </div>

            <div class="viz-container">

                <div class="viz-controls">

                    <button class="viz-btn active" onclick="showViz('temperature')">Temperature</button>

                    <button class="viz-btn" onclick="showViz('co2')">CO2 Levels</button>

                    <button class="viz-btn" onclick="showViz('ice')">Ice Coverage</button>

                    <button class="viz-btn" onclick="showViz('vegetation')">Vegetation</button>

                </div>

                <div class="viz-display">

                    <div class="viz-content active" id="temperature-viz">

                        <div class="chart-container">

                            <canvas id="tempChart" class="chart"></canvas>

                            <div class="data-loading" id="temp-loading">

                                <div class="loader"></div>

                                <p>Loading temperature data from NASA API...</p>

                            </div>

                        </div>

                    </div>

                    <div class="viz-content" id="co2-viz">

                        <div class="chart-container">

                            <canvas id="co2Chart" class="chart"></canvas>

                            <div class="data-loading" id="co2-loading">

                                <div class="loader"></div>

                                <p>Loading CO2 data from NASA API...</p>

                            </div>

                        </div>

                    </div>

                    <div class="viz-content" id="ice-viz">

                        <div class="chart-container">

                            <canvas id="iceChart" class="chart"></canvas>

                            <div class="data-loading" id="ice-loading">

                                <div class="loader"></div>

                                <p>Loading ice coverage data from NASA API...</p>

                            </div>

                        </div>

                    </div>

                    <div class="viz-content" id="vegetation-viz">

                        <div class="chart-container">

                            <canvas id="vegChart" class="chart"></canvas>

                            <div class="data-loading" id="veg-loading">

                                <div class="loader"></div>

                                <p>Loading vegetation data from NASA API...</p>

                            </div>

                        </div>

                    </div>

                </div>

                <div class="timeline">

                    <div class="timeline-track">

                        <div class="timeline-progress"></div>

                    </div>

                    <div class="timeline-markers">

                        <div class="timeline-marker">

                            <span>1999</span>

                        </div>

                        <div class="timeline-marker">

                            <span>2005</span>

                        </div>

                        <div class="timeline-marker">

                            <span>2010</span>

                        </div>

                        <div class="timeline-marker">

                            <span>2015</span>

                        </div>

                        <div class="timeline-marker">

                            <span>2020</span>

                        </div>

                        <div class="timeline-marker">

                            <span>2024</span>

                        </div>

                    </div>

                </div>

            </div>

        </div>

    </section>

    

    <!-- World Map Section -->

    <section class="world-map-section" id="world-map">

        <div class="world-map-container">

            <h3 class="world-map-title">Global Data Coverage</h3>

            <div id="worldMap"></div>

            <div class="map-legend">

                <div class="legend-item">

                    <div class="legend-color" style="background-color: #4fc3f7;"></div>

                    <span>Data Available</span>

                </div>

                <div class="legend-item">

                    <div class="legend-color" style="background-color: #ff5252;"></div>

                    <span>Selected Location</span>

                </div>

            </div>

        </div>

    </section>

    

    <!-- Custom Data Query Section -->

    <section class="custom-data-query" id="query">

        <div class="container">

            <div class="section-title">

                <h2>Custom Data Query</h2>

                <p>Explore TerraForge satellite data for specific dates, locations, and areas of interest</p>

            </div>

            <div class="query-container">

                <form id="queryForm" class="query-form">

                    <div class="form-group">

                        <label for="date">Date</label>

                        <input type="date" id="date" name="date" required>

                    </div>

                    <div class="form-group">

                        <label for="dataset">Dataset</label>

                        <select id="dataset" name="dataset" required>

                            <option value="">Select a dataset</option>

                            <option value="temperature">Temperature</option>

                            <option value="vegetation">Vegetation Index</option>

                            <option value="aerosol">Aerosol Optical Depth</option>

                            <option value="water_vapor">Water Vapor</option>

                            <option value="clouds">Cloud Properties</option>

                        </select>

                    </div>

                    <div class="form-group">

                        <label for="area">Area Size (km)</label>

                        <input type="number" id="area" name="area" placeholder="e.g., 10" min="1" max="100" value="10" required>

                    </div>

                </form>

                

                <!-- Location Form -->

                <div class="location-section">

                    <div class="location-header">

                        <div class="location-indicator"></div>

                        <h3>Location</h3>

                    </div>

                    <div class="query-form">

                        <div class="form-group">

                            <label for="location">Location</label>

                            <input type="text" id="location" name="location" placeholder="e.g., New York, USA" required>

                        </div>

                        <div class="form-group">

                            <label for="latitude">Latitude</label>

                            <input type="number" id="latitude" name="latitude" placeholder="e.g., 40.7128" step="0.0001" min="-90" max="90" required>

                        </div>

                        <div class="form-group">

                            <label for="longitude">Longitude</label>

                            <input type="number" id="longitude" name="longitude" placeholder="e.g., -74.0060" step="0.0001" min="-180" max="180" required>

                        </div>

                    </div>

                </div>

                

                <div class="form-actions">

                    <button type="submit" form="queryForm" class="btn">Query Data</button>

                </div>

                <div class="error-message" id="errorMessage"></div>

                <div class="api-info">

                    <p>Data source: <a href="https://earthdata.nasa.gov/" target="_blank">NASA Earth Observing System Data and Information System (EOSDIS)</a></p>

                </div>

                <div class="query-result" id="queryResult">

                    <div class="result-header">

                        <h3 id="resultTitle">Query Results</h3>

                        <div class="result-date" id="resultDate"></div>

                    </div>

                    <div class="result-content">

                        <div class="result-visualization">

                            <div class="data-visualization-bar" id="dataVisualizationBar">

                                <div class="data-gradient"></div>

                                <div class="data-extremes">

                                    <div class="data-extreme high">

                                        <div class="data-extreme-value" id="maxValue">--</div>

                                        <div class="data-extreme-label">Highest</div>

                                    </div>

                                    <div class="data-extreme low">

                                        <div class="data-extreme-value" id="minValue">--</div>

                                        <div class="data-extreme-label">Lowest</div>

                                    </div>

                                </div>

                                <div class="data-pixels" id="dataPixels"></div>

                            </div>

                            <div class="data-globe-container" id="data-globe-container">

                                <div class="data-globe-info">Interactive data visualization</div>

                            </div>

                            <div class="layer-controls" id="layerControls">

                                <div class="layer-control">

                                    <div class="layer-indicator" style="background-color: #ff5722;"></div>

                                    <span>Temperature</span>

                                </div>

                                <div class="layer-control">

                                    <div class="layer-indicator" style="background-color: #8bc34a;"></div>

                                    <span>Vegetation</span>

                                </div>

                                <div class="layer-control">

                                    <div class="layer-indicator" style="background-color: #03a9f4;"></div>

                                    <span>Water Vapor</span>

                                </div>

                                <div class="layer-control">

                                    <div class="layer-indicator" style="background-color: #9e9e9e;"></div>

                                    <span>Aerosols</span>

                                </div>

                                <div class="layer-control">

                                    <div class="layer-indicator" style="background-color: #ffffff;"></div>

                                    <span>Clouds</span>

                                </div>

                            </div>

                        </div>

                        <div class="result-data">

                            <div class="data-item">

                                <span class="data-label">Location:</span>

                                <span class="data-value" id="resultLocation"></span>

                            </div>

                            <div class="data-item">

                                <span class="data-label">Coordinates:</span>

                                <span class="data-value" id="resultCoords"></span>

                            </div>

                            <div class="data-item">

                                <span class="data-label">Dataset:</span>

                                <span class="data-value" id="resultDataset"></span>

                            </div>

                            <div class="data-item">

                                <span class="data-label">Value:</span>

                                <span class="data-value" id="resultValue"></span>

                            </div>

                            <div class="data-item">

                                <span class="data-label">Unit:</span>

                                <span class="data-value" id="resultUnit"></span>

                            </div>

                            <div class="data-item">

                                <span class="data-label">Quality:</span>

                                <span class="data-value" id="resultQuality"></span>

                            </div>

                        </div>

                    </div>

                </div>

            </div>

        </div>

    </section>

    

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <script>

        // NASA API configuration

        const NASA_API_KEY = 'VQrZFnlmpMhTIyAutXD4LfXNBIKkR6SO0cw49JFq';

        const NASA_API_BASE_URL = 'https://api.nasa.gov/planetary/earth';

        const GISS_API_URL = 'https://data.giss.nasa.gov/gistemp/tabledata_v4/GLB.Ts+dSST.csv';

        const OCO2_API_URL = 'https://ocov2.jpl.nasa.gov/ocov2/api/data';

        const NSIDC_API_URL = 'https://nsidc.org/api/data';

        

        // World map variables

        let worldMap;

        let selectedLocationMarker;

        

        // Generate stars

        function generateStars() {

            const starsContainer = document.getElementById('stars');

            const starCount = 200;

            

            for (let i = 0; i < starCount; i++) {

                const star = document.createElement('div');

                star.classList.add('star');

                star.style.left = `${Math.random() * 100}%`;

                star.style.top = `${Math.random() * 100}%`;

                star.style.animationDelay = `${Math.random() * 4}s`;

                starsContainer.appendChild(star);

            }

        }

        

        // Initialize stars on page load

        generateStars();

        

        // Hide loading overlay after page loads

        window.addEventListener('load', () => {

            setTimeout(() => {

                document.getElementById('loadingOverlay').classList.add('hidden');

            }, 1000);

        });

        

        // Initialize world map

        function initWorldMap() {

            // Create map

            worldMap = L.map('worldMap').setView([20, 0], 2);

            

            // Add tile layer with dark theme

            L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {

                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',

                subdomains: 'abcd',

                maxZoom: 19

            }).addTo(worldMap);

            

            // Add sample data points to show coverage

            const sampleDataPoints = [

                {lat: 40.7128, lng: -74.0060, name: "New York", value: 0.75},

                {lat: 51.5074, lng: -0.1278, name: "London", value: 0.82},

                {lat: 35.6762, lng: 139.6503, name: "Tokyo", value: 0.68},

                {lat: -33.8688, lng: 151.2093, name: "Sydney", value: 0.91},

                {lat: 48.8566, lng: 2.3522, name: "Paris", value: 0.73},

                {lat: 55.7558, lng: 37.6173, name: "Moscow", value: 0.65},

                {lat: -23.5505, lng: -46.6333, name: "São Paulo", value: 0.88},

                {lat: 19.4326, lng: -99.1332, name: "Mexico City", value: 0.79},

                {lat: 28.6139, lng: 77.2090, name: "New Delhi", value: 0.71},

                {lat: 39.9042, lng: 116.4074, name: "Beijing", value: 0.67},

                {lat: -1.2921, lng: 36.8219, name: "Nairobi", value: 0.85},

                {lat: -26.2041, lng: 28.0473, name: "Johannesburg", value: 0.77},

                {lat: 31.2304, lng: 121.4737, name: "Shanghai", value: 0.64},

                {lat: 25.2048, lng: 55.2708, name: "Dubai", value: 0.92},

                {lat: 37.5665, lng: 126.9780, name: "Seoul", value: 0.70}

            ];

            

            // Add markers for sample data points

            sampleDataPoints.forEach(point => {

                const colorIntensity = Math.floor(point.value * 255);

                const color = `rgb(${255 - colorIntensity}, ${colorIntensity}, 100)`;

                

                L.circleMarker([point.lat, point.lng], {

                    radius: 8,

                    fillColor: color,

                    color: '#fff',

                    weight: 1,

                    opacity: 0.8,

                    fillOpacity: 0.7

                }).addTo(worldMap).bindPopup(`<b>${point.name}</b><br>Data Value: ${point.value}`);

            });

            

            // Add click event to map

            worldMap.on('click', function(e) {

                const lat = e.latlng.lat.toFixed(4);

                const lng = e.latlng.lng.toFixed(4);

                

                // Update form fields with clicked coordinates

                document.getElementById('latitude').value = lat;

                document.getElementById('longitude').value = lng;

                

                // Update or create marker

                if (selectedLocationMarker) {

                    selectedLocationMarker.setLatLng(e.latlng);

                } else {

                    selectedLocationMarker = L.marker(e.latlng, {

                        icon: L.icon({

                            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',

                            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',

                            iconSize: [25, 41],

                            iconAnchor: [12, 41],

                            popupAnchor: [1, -34],

                            shadowSize: [41, 41]

                        })

                    }).addTo(worldMap);

                }

                

                // Try to get location name using reverse geocoding

                fetchLocationName(lat, lng);

            });

        }

        

        // Fetch location name using Nominatim API

        async function fetchLocationName(lat, lng) {

            try {

                const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`);

                const data = await response.json();

                

                if (data && data.display_name) {

                    // Use the city or town name if available, otherwise use the full display name

                    const locationName = data.address.city || data.address.town || data.address.county || data.display_name.split(',')[0];

                    document.getElementById('location').value = locationName;

                }

            } catch (error) {

                console.error('Error fetching location name:', error);

            }

        }

        

        // Smooth scrolling

        function scrollToSection(sectionId) {

            const section = document.getElementById(sectionId);

            const stickyInstruments = document.getElementById('stickyInstruments');

            const offset = stickyInstruments.classList.contains('visible') ? 100 : 80;

            

            window.scrollTo({

                top: section.offsetTop - offset,

                behavior: 'smooth'

            });

        }

        

        // Navigation active state

        document.querySelectorAll('nav a').forEach(link => {

            link.addEventListener('click', function(e) {

                e.preventDefault();

                document.querySelectorAll('nav a').forEach(a => a.classList.remove('active'));

                this.classList.add('active');

                const targetId = this.getAttribute('href').substring(1);

                scrollToSection(targetId);

            });

        });

        

        // Sticky instrument selection

        function selectStickyInstrument(instrument) {

            updateStickyInstrumentSelection(instrument);

            

            // In a real application, this would load data specific to the selected instrument

            console.log(`Selected instrument: ${instrument}`);

        }

        

        // Update sticky instrument selection

        function updateStickyInstrumentSelection(instrument) {

            document.querySelectorAll('.sticky-instrument-card').forEach(card => {

                card.classList.remove('active');

            });

            

            // Find and activate the corresponding sticky card

            const stickyCards = document.querySelectorAll('.sticky-instrument-card');

            const instrumentMap = ['aster', 'ceres', 'misr', 'modis', 'mopitt'];

            const index = instrumentMap.indexOf(instrument);

            if (index !== -1 && stickyCards[index]) {

                stickyCards[index].classList.add('active');

            }

        }

        

        // Visualization switching

        function showViz(vizType) {

            document.querySelectorAll('.viz-btn').forEach(btn => {

                btn.classList.remove('active');

            });

            event.currentTarget.classList.add('active');

            

            document.querySelectorAll('.viz-content').forEach(content => {

                content.classList.remove('active');

            });

            document.getElementById(`${vizType}-viz`).classList.add('active');

            

            // Update chart based on selection

            updateChart(vizType);

        }

        

        // Chart initialization

        let tempChart, co2Chart, iceChart, vegChart;

        

        // Fetch data from NASA API

        async function fetchNASAData(dataset, startDate, endDate) {

            try {

                let data;

                

                switch(dataset) {

                    case 'temperature':

                        // Fetch GISTEMP temperature data

                        data = await fetchGISTEMPTemperatureData();

                        break;

                    case 'co2':

                        // Fetch CO2 data from OCO-2 satellite

                        data = await fetchCO2Data();

                        break;

                    case 'ice':

                        // Fetch sea ice data from NSIDC

                        data = await fetchSeaIceData();

                        break;

                    case 'vegetation':

                        // Fetch NDVI data from MODIS

                        data = await fetchNDVIData();

                        break;

                    default:

                        // Return mock data if dataset is not recognized

                        return getMockData(dataset);

                }

                

                return data;

            } catch (error) {

                console.error('Error fetching NASA data:', error);

                // Return mock data if API fails

                return getMockData(dataset);

            }

        }

        

        // Fetch GISTEMP temperature data

        async function fetchGISTEMPTemperatureData() {

            try {

                const response = await fetch(GISS_API_URL);

                

                if (!response.ok) {

                    throw new Error(`GISS API request failed: ${response.status}`);

                }

                

                const csvData = await response.text();

                return parseGISTEMPCSV(csvData);

            } catch (error) {

                console.error('Error fetching GISTEMP data:', error);

                throw error;

            }

        }

        

        // Parse GISTEMP CSV data

        function parseGISTEMPCSV(csvData) {

            const lines = csvData.split('\n');

            const labels = [];

            const data = [];

            

            // Skip header lines and parse data

            for (let i = 7; i < lines.length; i++) {

                const line = lines[i].trim();

                if (!line) continue;

                

                const parts = line.split(',');

                if (parts.length < 13) continue;

                

                const year = parts[0];

                if (year < '1999' || year > '2023') continue;

                

                // Get annual mean (column 13)

                const value = parseFloat(parts[12]);

                if (isNaN(value)) continue;

                

                labels.push(year);

                data.push(value);

            }

            

            return { labels, data };

        }

        

        // Fetch CO2 data

        async function fetchCO2Data() {

            try {

                // Using NOAA's CO2 data as an alternative to OCO-2 API

                const response = await fetch('https://gml.noaa.gov/webdata/ccgg/trends/co2/co2_annmean_mlo.csv');

                

                if (!response.ok) {

                    throw new Error(`NOAA CO2 API request failed: ${response.status}`);

                }

                

                const csvData = await response.text();

                return parseCO2CSV(csvData);

            } catch (error) {

                console.error('Error fetching CO2 data:', error);

                throw error;

            }

        }

        

        // Parse CO2 CSV data

        function parseCO2CSV(csvData) {

            const lines = csvData.split('\n');

            const labels = [];

            const data = [];

            

            // Skip header line and parse data

            for (let i = 1; i < lines.length; i++) {

                const line = lines[i].trim();

                if (!line) continue;

                

                const parts = line.split(',');

                if (parts.length < 2) continue;

                

                const year = parts[0];

                if (year < '1999' || year > '2023') continue;

                

                const value = parseFloat(parts[1]);

                if (isNaN(value)) continue;

                

                labels.push(year);

                data.push(value);

            }

            

            return { labels, data };

        }

        

        // Fetch sea ice data

        async function fetchSeaIceData() {

            try {

                // Using NSIDC sea ice data

                const response = await fetch('https://nsidc.org/data/seaice_index/archives/Sea_Ice_Index_Monthly_Data_by_Year_G02135_v3.0.xlsx');

                

                if (!response.ok) {

                    throw new Error(`NSIDC API request failed: ${response.status}`);

                }

                

                // Since we can't directly parse Excel in the browser, we'll use a CSV alternative

                const csvResponse = await fetch('https://raw.githubusercontent.com/datasets/sea-ice-index/master/data/annual-extent.csv');

                const csvData = await csvResponse.text();

                

                return parseSeaIceCSV(csvData);

            } catch (error) {

                console.error('Error fetching sea ice data:', error);

                throw error;

            }

        }

        

        // Parse sea ice CSV data

        function parseSeaIceCSV(csvData) {

            const lines = csvData.split('\n');

            const labels = [];

            const data = [];

            

            // Skip header line and parse data

            for (let i = 1; i < lines.length; i++) {

                const line = lines[i].trim();

                if (!line) continue;

                

                const parts = line.split(',');

                if (parts.length < 3) continue;

                

                const year = parts[0];

                if (year < '1999' || year > '2023') continue;

                

                // Get Arctic September extent (column 3)

                const value = parseFloat(parts[2]);

                if (isNaN(value)) continue;

                

                labels.push(year);

                data.push(value);

            }

            

            return { labels, data };

        }

        

        // Fetch NDVI data

        async function fetchNDVIData() {

            try {

                // Using MODIS NDVI data from NASA Earthdata

                // Since direct API access requires authentication, we'll use a public dataset

                const response = await fetch('https://raw.githubusercontent.com/earthlab/modis-ndvi-time-series/master/data/ndvi_timeseries.csv');

                

                if (!response.ok) {

                    throw new Error(`NDVI API request failed: ${response.status}`);

                }

                

                const csvData = await response.text();

                return parseNDVICSV(csvData);

            } catch (error) {

                console.error('Error fetching NDVI data:', error);

                throw error;

            }

        }

        

        // Parse NDVI CSV data

        function parseNDVICSV(csvData) {

            const lines = csvData.split('\n');

            const labels = [];

            const data = [];

            

            // Skip header line and parse data

            for (let i = 1; i < lines.length; i++) {

                const line = lines[i].trim();

                if (!line) continue;

                

                const parts = line.split(',');

                if (parts.length < 2) continue;

                

                const year = parts[0];

                if (year < '1999' || year > '2023') continue;

                

                const value = parseFloat(parts[1]);

                if (isNaN(value)) continue;

                

                labels.push(year);

                data.push(value);

            }

            

            return { labels, data };

        }

        

        // Get mock data for demonstration

        function getMockData(dataset) {

            const years = ['1999', '2001', '2003', '2005', '2007', '2009', '2011', '2013', '2015', '2017', '2019', '2021', '2023'];

            

            switch(dataset) {

                case 'temperature':

                    return {

                        labels: years,

                        data: [0.42, 0.54, 0.62, 0.68, 0.66, 0.65, 0.59, 0.67, 0.87, 0.92, 0.98, 0.85, 1.17]

                    };

                case 'co2':

                    return {

                        labels: years,

                        data: [368, 371, 376, 380, 384, 387, 391, 397, 401, 406, 411, 416, 421]

                    };

                case 'ice':

                    return {

                        labels: years,

                        data: [7.0, 6.9, 6.7, 6.5, 6.3, 5.9, 5.7, 5.4, 5.2, 4.9, 4.7, 4.5, 4.3]

                    };

                case 'vegetation':

                    return {

                        labels: years,

                        data: [0.46, 0.462, 0.464, 0.465, 0.466, 0.467, 0.468, 0.469, 0.47, 0.471, 0.472, 0.473, 0.474]

                    };

                default:

                    return { labels: years, data: [] };

            }

        }

        

        // Initialize charts with data

        async function initCharts() {

            // Temperature Chart

            const tempCtx = document.getElementById('tempChart').getContext('2d');

            const tempLoading = document.getElementById('temp-loading');

            

            // Show loading indicator

            tempLoading.style.display = 'flex';

            

            // Fetch temperature data

            const tempData = await fetchNASAData('temperature', '1999-01-01', '2023-12-31');

            

            tempChart = new Chart(tempCtx, {

                type: 'line',

                data: {

                    labels: tempData.labels,

                    datasets: [{

                        label: 'Global Temperature Anomaly (°C)',

                        data: tempData.data,

                        borderColor: '#ff5722',

                        backgroundColor: 'rgba(255, 87, 34, 0.1)',

                        tension: 0.4,

                        fill: true

                    }]

                },

                options: {

                    responsive: true,

                    maintainAspectRatio: false,

                    plugins: {

                        legend: {

                            labels: {

                                color: '#b3e5fc'

                            }

                        },

                        tooltip: {

                            callbacks: {

                                label: function(context) {

                                    return `${context.dataset.label}: ${context.raw}°C`;

                                }

                            }

                        }

                    },

                    scales: {

                        y: {

                            ticks: {

                                color: '#b3e5fc',

                                callback: function(value) {

                                    return value + '°C';

                                }

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        },

                        x: {

                            ticks: {

                                color: '#b3e5fc'

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        }

                    }

                }

            });

            

            // Hide loading indicator

            tempLoading.style.display = 'none';

            

            // CO2 Chart

            const co2Ctx = document.getElementById('co2Chart').getContext('2d');

            const co2Loading = document.getElementById('co2-loading');

            

            // Show loading indicator

            co2Loading.style.display = 'flex';

            

            // Fetch CO2 data

            const co2Data = await fetchNASAData('co2', '1999-01-01', '2023-12-31');

            

            co2Chart = new Chart(co2Ctx, {

                type: 'line',

                data: {

                    labels: co2Data.labels,

                    datasets: [{

                        label: 'Atmospheric CO2 (ppm)',

                        data: co2Data.data,

                        borderColor: '#4caf50',

                        backgroundColor: 'rgba(76, 175, 80, 0.1)',

                        tension: 0.4,

                        fill: true

                    }]

                },

                options: {

                    responsive: true,

                    maintainAspectRatio: false,

                    plugins: {

                        legend: {

                            labels: {

                                color: '#b3e5fc'

                            }

                        },

                        tooltip: {

                            callbacks: {

                                label: function(context) {

                                    return `${context.dataset.label}: ${context.raw} ppm`;

                                }

                            }

                        }

                    },

                    scales: {

                        y: {

                            ticks: {

                                color: '#b3e5fc',

                                callback: function(value) {

                                    return value + ' ppm';

                                }

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        },

                        x: {

                            ticks: {

                                color: '#b3e5fc'

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        }

                    }

                }

            });

            

            // Hide loading indicator

            co2Loading.style.display = 'none';

            

            // Ice Chart

            const iceCtx = document.getElementById('iceChart').getContext('2d');

            const iceLoading = document.getElementById('ice-loading');

            

            // Show loading indicator

            iceLoading.style.display = 'flex';

            

            // Fetch ice data

            const iceData = await fetchNASAData('ice', '1999-01-01', '2023-12-31');

            

            iceChart = new Chart(iceCtx, {

                type: 'line',

                data: {

                    labels: iceData.labels,

                    datasets: [{

                        label: 'Arctic Sea Ice Extent (million sq km)',

                        data: iceData.data,

                        borderColor: '#03a9f4',

                        backgroundColor: 'rgba(3, 169, 244, 0.1)',

                        tension: 0.4,

                        fill: true

                    }]

                },

                options: {

                    responsive: true,

                    maintainAspectRatio: false,

                    plugins: {

                        legend: {

                            labels: {

                                color: '#b3e5fc'

                            }

                        },

                        tooltip: {

                            callbacks: {

                                label: function(context) {

                                    return `${context.dataset.label}: ${context.raw} million sq km`;

                                }

                            }

                        }

                    },

                    scales: {

                        y: {

                            ticks: {

                                color: '#b3e5fc',

                                callback: function(value) {

                                    return value + ' M km²';

                                }

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        },

                        x: {

                            ticks: {

                                color: '#b3e5fc'

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        }

                    }

                }

            });

            

            // Hide loading indicator

            iceLoading.style.display = 'none';

            

            // Vegetation Chart

            const vegCtx = document.getElementById('vegChart').getContext('2d');

            const vegLoading = document.getElementById('veg-loading');

            

            // Show loading indicator

            vegLoading.style.display = 'flex';

            

            // Fetch vegetation data

            const vegData = await fetchNASAData('vegetation', '1999-01-01', '2023-12-31');

            

            vegChart = new Chart(vegCtx, {

                type: 'line',

                data: {

                    labels: vegData.labels,

                    datasets: [{

                        label: 'Global Vegetation Index (NDVI)',

                        data: vegData.data,

                        borderColor: '#8bc34a',

                        backgroundColor: 'rgba(139, 195, 74, 0.1)',

                        tension: 0.4,

                        fill: true

                    }]

                },

                options: {

                    responsive: true,

                    maintainAspectRatio: false,

                    plugins: {

                        legend: {

                            labels: {

                                color: '#b3e5fc'

                            }

                        },

                        tooltip: {

                            callbacks: {

                                label: function(context) {

                                    return `${context.dataset.label}: ${context.raw}`;

                                }

                            }

                        }

                    },

                    scales: {

                        y: {

                            ticks: {

                                color: '#b3e5fc'

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        },

                        x: {

                            ticks: {

                                color: '#b3e5fc'

                            },

                            grid: {

                                color: 'rgba(255, 255, 255, 0.1)'

                            }

                        }

                    }

                }

            });

            

            // Hide loading indicator

            vegLoading.style.display = 'none';

        }

        

        // Update chart with animation

        function updateChart(chartType) {

            // In a real application, this would update the chart with new data

            // For this demo, we'll just trigger a resize to ensure the chart displays properly

            switch(chartType) {

                case 'temperature':

                    tempChart.resize();

                    break;

                case 'co2':

                    co2Chart.resize();

                    break;

                case 'ice':

                    iceChart.resize();

                    break;

                case 'vegetation':

                    vegChart.resize();

                    break;

            }

        }

        

        // Initialize charts and map when the page loads

        window.addEventListener('load', () => {

            initCharts();

            initWorldMap();

        });

        

        // Add parallax effect to hero section

        window.addEventListener('scroll', () => {

            const scrolled = window.pageYOffset;

            const parallax = document.querySelector('.hero');

            parallax.style.transform = `translateY(${scrolled * 0.5}px)`;

            

            // Show/hide sticky instruments based on scroll position

            const stickyInstruments = document.getElementById('stickyInstruments');

            const scrollPosition = window.scrollY;

            

            // Show sticky navigation after scrolling past the hero section

            if (scrollPosition > 200) {

                stickyInstruments.classList.add('visible');

            } else {

                stickyInstruments.classList.remove('visible');

            }

        });

        

        // 3D Earth initialization

        let scene, camera, renderer, earth, earthGroup, atmosphere, clouds;

        let mouseX = 0, mouseY = 0;

        let targetRotationX = 0, targetRotationY = 0;

        let isMouseDown = false;

        let previousMousePosition = { x: 0, y: 0 };

        

        function init3DEarth() {

            const container = document.getElementById('globe-container');

            const width = container.clientWidth;

            const height = container.clientHeight;

            

            // Create scene

            scene = new THREE.Scene();

            

            // Create camera

            camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);

            camera.position.z = 2.5;

            

            // Create renderer

            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });

            renderer.setSize(width, height);

            renderer.setClearColor(0x000000, 0);

            container.appendChild(renderer.domElement);

            

            // Create Earth group

            earthGroup = new THREE.Group();

            scene.add(earthGroup);

            

            // Create Earth

            const geometry = new THREE.SphereGeometry(1, 64, 64);

            

            // Load Earth texture

            const textureLoader = new THREE.TextureLoader();

            

            // Use a proper Earth texture URL

            const earthTexture = textureLoader.load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_atmos_2048.jpg');

            const earthSpecularMap = textureLoader.load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_specular_2048.jpg');

            const earthNormalMap = textureLoader.load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_normal_2048.jpg');

            

            const material = new THREE.MeshPhongMaterial({

                map: earthTexture,

                specularMap: earthSpecularMap,

                normalMap: earthNormalMap,

                bumpScale: 0.05,

                specular: new THREE.Color('grey'),

                shininess: 10

            });

            

            earth = new THREE.Mesh(geometry, material);

            earthGroup.add(earth);

            

            // Add clouds

            const cloudGeometry = new THREE.SphereGeometry(1.01, 64, 64);

            const cloudTexture = textureLoader.load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_clouds_1024.png');

            

            const cloudMaterial = new THREE.MeshPhongMaterial({

                map: cloudTexture,

                opacity: 0.4,

                transparent: true,

                depthWrite: false

            });

            

            clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);

            earthGroup.add(clouds);

            

            // Add atmosphere glow

            const atmosphereGeometry = new THREE.SphereGeometry(1.1, 64, 64);

            const atmosphereMaterial = new THREE.ShaderMaterial({

                vertexShader: `

                    varying vec3 vNormal;

                    void main() {

                        vNormal = normalize(normalMatrix * normal);

                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);

                    }

                `,

                fragmentShader: `

                    varying vec3 vNormal;

                    void main() {

                        float intensity = pow(0.7 - dot(vNormal, vec3(0, 0, 1.0)), 2.0);

                        gl_FragColor = vec4(0.3, 0.6, 1.0, 1.0) * intensity;

                    }

                `,

                blending: THREE.AdditiveBlending,

                side: THREE.BackSide,

                transparent: true

            });

            

            atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);

            earthGroup.add(atmosphere);

            

            // Add lights

            const ambientLight = new THREE.AmbientLight(0x333333);

            scene.add(ambientLight);

            

            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);

            directionalLight.position.set(5, 3, 5);

            scene.add(directionalLight);

            

            // Add a second light for better contrast

            const directionalLight2 = new THREE.DirectionalLight(0x7c7cff, 0.3);

            directionalLight2.position.set(-5, -3, -5);

            scene.add(directionalLight2);

            

            // Add mouse controls

            container.addEventListener('mousedown', onMouseDown);

            container.addEventListener('mousemove', onMouseMove);

            container.addEventListener('mouseup', onMouseUp);

            container.addEventListener('mouseleave', onMouseUp);

            

            // Add touch controls for mobile

            container.addEventListener('touchstart', onTouchStart);

            container.addEventListener('touchmove', onTouchMove);

            container.addEventListener('touchend', onTouchEnd);

            

            // Add scroll zoom

            container.addEventListener('wheel', onMouseWheel);

            

            // Start animation

            animate3DEarth();

        }

        

        function onMouseDown(event) {

            isMouseDown = true;

            previousMousePosition = {

                x: event.clientX,

                y: event.clientY

            };

        }

        

        function onMouseMove(event) {

            if (isMouseDown) {

                const deltaMove = {

                    x: event.clientX - previousMousePosition.x,

                    y: event.clientY - previousMousePosition.y

                };

                

                targetRotationY += deltaMove.x * 0.01;

                targetRotationX += deltaMove.y * 0.01;

                

                previousMousePosition = {

                    x: event.clientX,

                    y: event.clientY

                };

            }

        }

        

        function onMouseUp() {

            isMouseDown = false;

        }

        

        function onTouchStart(event) {

            if (event.touches.length === 1) {

                isMouseDown = true;

                previousMousePosition = {

                    x: event.touches[0].clientX,

                    y: event.touches[0].clientY

                };

            }

        }

        

        function onTouchMove(event) {

            if (event.touches.length === 1 && isMouseDown) {

                event.preventDefault();

                const deltaMove = {

                    x: event.touches[0].clientX - previousMousePosition.x,

                    y: event.touches[0].clientY - previousMousePosition.y

                };

                

                targetRotationY += deltaMove.x * 0.01;

                targetRotationX += deltaMove.y * 0.01;

                

                previousMousePosition = {

                    x: event.touches[0].clientX,

                    y: event.touches[0].clientY

                };

            }

        }

        

        function onTouchEnd() {

            isMouseDown = false;

        }

        

        function onMouseWheel(event) {

            event.preventDefault();

            const delta = event.deltaY * 0.001;

            camera.position.z = Math.max(1.5, Math.min(4, camera.position.z + delta));

        }

        

        function animate3DEarth() {

            requestAnimationFrame(animate3DEarth);

            

            // Auto-rotate when not interacting

            if (!isMouseDown) {

                targetRotationY += 0.002;

            }

            

            // Smooth rotation

            earthGroup.rotation.x += (targetRotationX - earthGroup.rotation.x) * 0.05;

            earthGroup.rotation.y += (targetRotationY - earthGroup.rotation.y) * 0.05;

            

            // Limit vertical rotation

            earthGroup.rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, earthGroup.rotation.x));

            

            // Rotate clouds slightly faster than Earth

            if (clouds) {

                clouds.rotation.y += 0.0005;

            }

            

            renderer.render(scene, camera);

        }

        

        // Initialize 3D Earth when page loads

        window.addEventListener('load', init3DEarth);

        

        // Handle window resize

        window.addEventListener('resize', () => {

            const container = document.getElementById('globe-container');

            const width = container.clientWidth;

            const height = container.clientHeight;

            

            if (camera && renderer) {

                camera.aspect = width / height;

                camera.updateProjectionMatrix();

                renderer.setSize(width, height);

            }

            

            // Also resize the world map

            if (worldMap) {

                worldMap.invalidateSize();

            }

        });

        

        // Data Globe 3D Earth initialization

        let dataScene, dataCamera, dataRenderer, dataEarth, dataEarthGroup, dataAtmosphere, dataClouds;

        let dataLayers = {

            temperature: null,

            vegetation: null,

            waterVapor: null,

            aerosols: null,

            clouds: null

        };

        let dataMouseX = 0, dataMouseY = 0;

        let dataTargetRotationX = 0, dataTargetRotationY = 0;

        let dataIsMouseDown = false;

        let dataPreviousMousePosition = { x: 0, y: 0 };

        let activeDataset = null;

        

        function initDataGlobe() {

            const container = document.getElementById('data-globe-container');

            const width = container.clientWidth;

            const height = container.clientHeight;

            

            // Create scene

            dataScene = new THREE.Scene();

            

            // Create camera

            dataCamera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);

            dataCamera.position.z = 2.5;

            

            // Create renderer

            dataRenderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });

            dataRenderer.setSize(width, height);

            dataRenderer.setClearColor(0x000000, 0);

            container.appendChild(dataRenderer.domElement);

            

            // Create Earth group

            dataEarthGroup = new THREE.Group();

            dataScene.add(dataEarthGroup);

            

            // Create Earth

            const geometry = new THREE.SphereGeometry(1, 64, 64);

            

            // Load Earth texture

            const textureLoader = new THREE.TextureLoader();

            

            // Use a proper Earth texture URL

            const earthTexture = textureLoader.load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_atmos_2048.jpg');

            const earthSpecularMap = textureLoader.load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_specular_2048.jpg');

            const earthNormalMap = textureLoader.load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_normal_2048.jpg');

            

            const material = new THREE.MeshPhongMaterial({

                map: earthTexture,

                specularMap: earthSpecularMap,

                normalMap: earthNormalMap,

                bumpScale: 0.05,

                specular: new THREE.Color('grey'),

                shininess: 10

            });

            

            dataEarth = new THREE.Mesh(geometry, material);

            dataEarthGroup.add(dataEarth);

            

            // Add clouds

            const cloudGeometry = new THREE.SphereGeometry(1.01, 64, 64);

            const cloudTexture = textureLoader.load('https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_clouds_1024.png');

            

            const cloudMaterial = new THREE.MeshPhongMaterial({

                map: cloudTexture,

                opacity: 0.4,

                transparent: true,

                depthWrite: false

            });

            

            dataClouds = new THREE.Mesh(cloudGeometry, cloudMaterial);

            dataEarthGroup.add(dataClouds);

            

            // Add atmosphere glow

            const atmosphereGeometry = new THREE.SphereGeometry(1.1, 64, 64);

            const atmosphereMaterial = new THREE.ShaderMaterial({

                vertexShader: `

                    varying vec3 vNormal;

                    void main() {

                        vNormal = normalize(normalMatrix * normal);

                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);

                    }

                `,

                fragmentShader: `

                    varying vec3 vNormal;

                    void main() {

                        float intensity = pow(0.7 - dot(vNormal, vec3(0, 0, 1.0)), 2.0);

                        gl_FragColor = vec4(0.3, 0.6, 1.0, 1.0) * intensity;

                    }

                `,

                blending: THREE.AdditiveBlending,

                side: THREE.BackSide,

                transparent: true

            });

            

            dataAtmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);

            dataEarthGroup.add(dataAtmosphere);

            

            // Create data layers

            createDataLayers();

            

            // Add lights

            const ambientLight = new THREE.AmbientLight(0x333333);

            dataScene.add(ambientLight);

            

            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);

            directionalLight.position.set(5, 3, 5);

            dataScene.add(directionalLight);

            

            // Add a second light for better contrast

            const directionalLight2 = new THREE.DirectionalLight(0x7c7cff, 0.3);

            directionalLight2.position.set(-5, -3, -5);

            dataScene.add(directionalLight2);

            

            // Add mouse controls

            container.addEventListener('mousedown', onDataMouseDown);

            container.addEventListener('mousemove', onDataMouseMove);

            container.addEventListener('mouseup', onDataMouseUp);

            container.addEventListener('mouseleave', onDataMouseUp);

            

            // Add touch controls for mobile

            container.addEventListener('touchstart', onDataTouchStart);

            container.addEventListener('touchmove', onDataTouchMove);

            container.addEventListener('touchend', onDataTouchEnd);

            

            // Add scroll zoom

            container.addEventListener('wheel', onDataMouseWheel);

            

            // Start animation

            animateDataGlobe();

        }

        

        function createDataLayers() {

            const textureLoader = new THREE.TextureLoader();

            

            // Temperature layer (red/orange)

            const tempGeometry = new THREE.SphereGeometry(1.02, 64, 64);

            const tempMaterial = new THREE.MeshBasicMaterial({

                color: 0xff5722,

                transparent: true,

                opacity: 0,

                side: THREE.DoubleSide

            });

            dataLayers.temperature = new THREE.Mesh(tempGeometry, tempMaterial);

            dataEarthGroup.add(dataLayers.temperature);

            

            // Vegetation layer (green)

            const vegGeometry = new THREE.SphereGeometry(1.03, 64, 64);

            const vegMaterial = new THREE.MeshBasicMaterial({

                color: 0x8bc34a,

                transparent: true,

                opacity: 0,

                side: THREE.DoubleSide

            });

            dataLayers.vegetation = new THREE.Mesh(vegGeometry, vegMaterial);

            dataEarthGroup.add(dataLayers.vegetation);

            

            // Water vapor layer (blue)

            const waterGeometry = new THREE.SphereGeometry(1.04, 64, 64);

            const waterMaterial = new THREE.MeshBasicMaterial({

                color: 0x03a9f4,

                transparent: true,

                opacity: 0,

                side: THREE.DoubleSide

            });

            dataLayers.waterVapor = new THREE.Mesh(waterGeometry, waterMaterial);

            dataEarthGroup.add(dataLayers.waterVapor);

            

            // Aerosols layer (gray)

            const aerosolGeometry = new THREE.SphereGeometry(1.05, 64, 64);

            const aerosolMaterial = new THREE.MeshBasicMaterial({

                color: 0x9e9e9e,

                transparent: true,

                opacity: 0,

                side: THREE.DoubleSide

            });

            dataLayers.aerosols = new THREE.Mesh(aerosolGeometry, aerosolMaterial);

            dataEarthGroup.add(dataLayers.aerosols);

            

            // Clouds layer (white)

            const cloudDataGeometry = new THREE.SphereGeometry(1.06, 64, 64);

            const cloudDataMaterial = new THREE.MeshBasicMaterial({

                color: 0xffffff,

                transparent: true,

                opacity: 0,

                side: THREE.DoubleSide

            });

            dataLayers.clouds = new THREE.Mesh(cloudDataGeometry, cloudDataMaterial);

            dataEarthGroup.add(dataLayers.clouds);

        }

        

        function updateDataLayers(dataset, value) {

            // Reset all layers

            Object.keys(dataLayers).forEach(key => {

                if (dataLayers[key]) {

                    dataLayers[key].material.opacity = 0;

                }

            });

            

            // Activate the relevant layer based on dataset

            if (dataLayers[dataset]) {

                // Calculate opacity based on value (normalized)

                let normalizedValue = 0.5; // Default opacity

                

                switch(dataset) {

                    case 'temperature':

                        // Normalize temperature (-10 to 30°C) to 0-1 range

                        normalizedValue = (parseFloat(value) + 10) / 40;

                        break;

                    case 'vegetation':

                        // NDVI is already in 0-1 range

                        normalizedValue = parseFloat(value);

                        break;

                    case 'water_vapor':

                        // Normalize water vapor (0-50 g/kg) to 0-1 range

                        normalizedValue = parseFloat(value) / 50;

                        break;

                    case 'aerosol':

                        // AOD is already in 0-1 range

                        normalizedValue = parseFloat(value);

                        break;

                    case 'clouds':

                        // Normalize clouds (0-100%) to 0-1 range

                        normalizedValue = parseFloat(value) / 100;

                        break;

                }

                

                // Clamp the value between 0.2 and 0.8 for better visibility

                normalizedValue = Math.max(0.2, Math.min(0.8, normalizedValue));

                

                // Set the opacity with animation

                animateLayerOpacity(dataLayers[dataset], normalizedValue);

            }

            

            activeDataset = dataset;

        }

        

        function animateLayerOpacity(layer, targetOpacity) {

            const startOpacity = layer.material.opacity;

            const change = targetOpacity - startOpacity;

            const duration = 1000; // 1 second

            const startTime = Date.now();

            

            function updateOpacity() {

                const elapsed = Date.now() - startTime;

                const progress = Math.min(elapsed / duration, 1);

                

                // Use ease-in-out function for smooth animation

                const easeProgress = progress < 0.5 

                    ? 2 * progress * progress 

                    : 1 - Math.pow(-2 * progress + 2, 2) / 2;

                

                layer.material.opacity = startOpacity + change * easeProgress;

                

                if (progress < 1) {

                    requestAnimationFrame(updateOpacity);

                }

            }

            

            updateOpacity();

        }

        

        function onDataMouseDown(event) {

            dataIsMouseDown = true;

            dataPreviousMousePosition = {

                x: event.clientX,

                y: event.clientY

            };

        }

        

        function onDataMouseMove(event) {

            if (dataIsMouseDown) {

                const deltaMove = {

                    x: event.clientX - dataPreviousMousePosition.x,

                    y: event.clientY - dataPreviousMousePosition.y

                };

                

                dataTargetRotationY += deltaMove.x * 0.01;

                dataTargetRotationX += deltaMove.y * 0.01;

                

                dataPreviousMousePosition = {

                    x: event.clientX,

                    y: event.clientY

                };

            }

        }

        

        function onDataMouseUp() {

            dataIsMouseDown = false;

        }

        

        function onDataTouchStart(event) {

            if (event.touches.length === 1) {

                dataIsMouseDown = true;

                dataPreviousMousePosition = {

                    x: event.touches[0].clientX,

                    y: event.touches[0].clientY

                };

            }

        }

        

        function onDataTouchMove(event) {

            if (event.touches.length === 1 && dataIsMouseDown) {

                event.preventDefault();

                const deltaMove = {

                    x: event.touches[0].clientX - dataPreviousMousePosition.x,

                    y: event.touches[0].clientY - dataPreviousMousePosition.y

                };

                

                dataTargetRotationY += deltaMove.x * 0.01;

                dataTargetRotationX += deltaMove.y * 0.01;

                

                dataPreviousMousePosition = {

                    x: event.touches[0].clientX,

                    y: event.touches[0].clientY

                };

            }

        }

        

        function onDataTouchEnd() {

            dataIsMouseDown = false;

        }

        

        function onDataMouseWheel(event) {

            event.preventDefault();

            const delta = event.deltaY * 0.001;

            dataCamera.position.z = Math.max(1.5, Math.min(4, dataCamera.position.z + delta));

        }

        

        function animateDataGlobe() {

            requestAnimationFrame(animateDataGlobe);

            

            // Auto-rotate when not interacting

            if (!dataIsMouseDown) {

                dataTargetRotationY += 0.002;

            }

            

            // Smooth rotation

            dataEarthGroup.rotation.x += (dataTargetRotationX - dataEarthGroup.rotation.x) * 0.05;

            dataEarthGroup.rotation.y += (dataTargetRotationY - dataEarthGroup.rotation.y) * 0.05;

            

            // Limit vertical rotation

            dataEarthGroup.rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, dataEarthGroup.rotation.x));

            

            // Rotate clouds slightly faster than Earth

            if (dataClouds) {

                dataClouds.rotation.y += 0.0005;

            }

            

            // Animate active data layer

            if (activeDataset && dataLayers[activeDataset]) {

                // Add subtle pulsing effect to the active layer

                const time = Date.now() * 0.001;

                const pulseFactor = 0.05 * Math.sin(time * 2);

                const baseScale = 1.0 + (Object.keys(dataLayers).indexOf(activeDataset) * 0.01);

                dataLayers[activeDataset].scale.set(baseScale + pulseFactor, baseScale + pulseFactor, baseScale + pulseFactor);

            }

            

            dataRenderer.render(dataScene, dataCamera);

        }

        

        // Custom Data Query functionality

        document.getElementById('queryForm').addEventListener('submit', async function(e) {

            e.preventDefault();

            

            // Get form values

            const date = document.getElementById('date').value;

            const dataset = document.getElementById('dataset').value;

            const area = parseFloat(document.getElementById('area').value);

            

            // Get location values

            const location = document.getElementById('location').value;

            const latitude = parseFloat(document.getElementById('latitude').value);

            const longitude = parseFloat(document.getElementById('longitude').value);

            

            // Validate inputs

            if (!date || !dataset || !location || isNaN(latitude) || isNaN(longitude)) {

                showError('Please fill in all required fields with valid values.');

                return;

            }

            

            // Validate latitude and longitude ranges

            if (latitude < -90 || latitude > 90) {

                showError('Latitude must be between -90 and 90 degrees.');

                return;

            }

            

            if (longitude < -180 || longitude > 180) {

                showError('Longitude must be between -180 and 180 degrees.');

                return;

            }

            

            // Hide any previous error messages

            hideError();

            

            // Show loading state

            const queryResult = document.getElementById('queryResult');

            queryResult.classList.remove('active');

            

            // Update map marker with selected location

            if (worldMap && latitude && longitude) {

                if (selectedLocationMarker) {

                    selectedLocationMarker.setLatLng([latitude, longitude]);

                } else {

                    selectedLocationMarker = L.marker([latitude, longitude], {

                        icon: L.icon({

                            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',

                            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',

                            iconSize: [25, 41],

                            iconAnchor: [12, 41],

                            popupAnchor: [1, -34],

                            shadowSize: [41, 41]

                        })

                    }).addTo(worldMap);

                }

                

                // Center map on selected location

                worldMap.setView([latitude, longitude], 5);

            }

            

            // Fetch data based on query

            try {

                const data = await fetchCustomData(date, latitude, longitude, dataset, area);

                displayQueryResult(data, date, location, latitude, longitude, dataset);

            } catch (error) {

                showError(`Error fetching data: ${error.message}`);

            }

        });

        

        // Fetch custom data from NASA API

        async function fetchCustomData(date, lat, lon, dataset, area) {

            try {

                // Get additional data based on dataset

                let additionalData = {};

                

                try {

                    switch(dataset) {

                        case 'temperature':

                            additionalData = await fetchTemperatureForLocation(lat, lon, date);

                            break;

                        case 'vegetation':

                            additionalData = await fetchNDVIForLocation(lat, lon, date);

                            break;

                        case 'aerosol':

                            additionalData = await fetchAODForLocation(lat, lon, date);

                            break;

                        case 'water_vapor':

                            additionalData = await fetchWaterVaporForLocation(lat, lon, date);

                            break;

                        case 'clouds':

                            additionalData = await fetchCloudDataForLocation(lat, lon, date);

                            break;

                    }

                } catch (error) {

                    console.error('Error fetching additional data:', error);

                    // Use mock data if additional data fetch fails

                    additionalData = {

                        value: generateMockValue(dataset),

                        unit: getUnitForDataset(dataset),

                        quality: 'Good'

                    };

                }

                

                return {

                    date: date,

                    dataset: dataset,

                    value: additionalData.value || generateMockValue(dataset),

                    unit: additionalData.unit || getUnitForDataset(dataset),

                    quality: additionalData.quality || 'Good'

                };

            } catch (error) {

                console.error('Error fetching custom data:', error);

                // Return mock data if API fails

                return {

                    date: date,

                    dataset: dataset,

                    value: generateMockValue(dataset),

                    unit: getUnitForDataset(dataset),

                    quality: 'Good'

                };

            }

        }

        

        // Fetch temperature data for specific location

        async function fetchTemperatureForLocation(lat, lon, date) {

            try {

                // Using NASA POWER API for temperature data

                const startDate = new Date(date);

                const endDate = new Date(date);

                endDate.setDate(endDate.getDate() + 1);

                

                // Format date as YYYYMMDD

                const startDateStr = `${startDate.getFullYear()}${String(startDate.getMonth() + 1).padStart(2, '0')}${String(startDate.getDate()).padStart(2, '0')}`;

                const endDateStr = `${endDate.getFullYear()}${String(endDate.getMonth() + 1).padStart(2, '0')}${String(endDate.getDate()).padStart(2, '0')}`;

                

                const url = `https://power.larc.nasa.gov/api/temporal/daily/point?start=${startDateStr}&end=${endDateStr}&latitude=${lat}&longitude=${lon}&community=SB&parameters=T2M&format=JSON`;

                

                const response = await fetch(url);

                

                if (!response.ok) {

                    throw new Error(`NASA POWER API request failed: ${response.status}`);

                }

                

                const data = await response.json();

                

                // Check if the response has the expected structure

                if (data && data.properties && data.properties.parameter && data.properties.parameter.T2M) {

                    const tempData = data.properties.parameter.T2M;

                    

                    // Try to get the temperature for the specific date

                    let temperature = tempData[startDateStr];

                    

                    // If the exact date is not available, try to get any available temperature

                    if (!temperature) {

                        const availableDates = Object.keys(tempData);

                        if (availableDates.length > 0) {

                            temperature = tempData[availableDates[0]];

                        }

                    }

                    

                    if (temperature !== undefined && temperature !== null) {

                        return {

                            value: temperature.toFixed(2),

                            unit: '°C',

                            quality: 'Good'

                        };

                    }

                }

                

                // If we couldn't get valid temperature data, use mock data

                return {

                    value: generateMockValue('temperature'),

                    unit: '°C',

                    quality: 'Estimated'

                };

            } catch (error) {

                console.error('Error fetching temperature data:', error);

                // Return mock data if API fails

                return {

                    value: generateMockValue('temperature'),

                    unit: '°C',

                    quality: 'Estimated'

                };

            }

        }

        

        // Fetch NDVI data for specific location

        async function fetchNDVIForLocation(lat, lon, date) {

            try {

                // Using MODIS NDVI data from NASA's Earthdata

                // This is a simplified example - in a real application, you would need to authenticate with Earthdata

                

                // For demonstration, we'll use a public dataset

                const url = `https://modis.gsfc.nasa.gov/data/dataprod/mod13.php`;

                

                // Since we can't directly query the API without authentication, we'll return mock data

                // In a real application, you would use NASA's Earthdata API with proper authentication

                

                return {

                    value: generateMockValue('vegetation'),

                    unit: 'NDVI',

                    quality: 'Good'

                };

            } catch (error) {

                console.error('Error fetching NDVI data:', error);

                throw error;

            }

        }

        

        // Fetch Aerosol Optical Depth data for specific location

        async function fetchAODForLocation(lat, lon, date) {

            try {

                // Using MODIS AOD data from NASA's Earthdata

                // This is a simplified example - in a real application, you would need to authenticate with Earthdata

                

                // For demonstration, we'll use a public dataset

                const url = `https://modis.gsfc.nasa.gov/data/dataprod/mod04.php`;

                

                // Since we can't directly query the API without authentication, we'll return mock data

                // In a real application, you would use NASA's Earthdata API with proper authentication

                

                return {

                    value: generateMockValue('aerosol'),

                    unit: 'AOD',

                    quality: 'Good'

                };

            } catch (error) {

                console.error('Error fetching AOD data:', error);

                throw error;

            }

        }

        

        // Fetch Water Vapor data for specific location

        async function fetchWaterVaporForLocation(lat, lon, date) {

            try {

                // Using MODIS Water Vapor data from NASA's Earthdata

                // This is a simplified example - in a real application, you would need to authenticate with Earthdata

                

                // For demonstration, we'll use a public dataset

                const url = `https://modis.gsfc.nasa.gov/data/dataprod/mod05.php`;

                

                // Since we can't directly query the API without authentication, we'll return mock data

                // In a real application, you would use NASA's Earthdata API with proper authentication

                

                return {

                    value: generateMockValue('water_vapor'),

                    unit: 'g/kg',

                    quality: 'Good'

                };

            } catch (error) {

                console.error('Error fetching Water Vapor data:', error);

                throw error;

            }

        }

        

        // Fetch Cloud data for specific location

        async function fetchCloudDataForLocation(lat, lon, date) {

            try {

                // Using MODIS Cloud data from NASA's Earthdata

                // This is a simplified example - in a real application, you would need to authenticate with Earthdata

                

                // For demonstration, we'll use a public dataset

                const url = `https://modis.gsfc.nasa.gov/data/dataprod/mod06.php`;

                

                // Since we can't directly query the API without authentication, we'll return mock data

                // In a real application, you would use NASA's Earthdata API with proper authentication

                

                return {

                    value: generateMockValue('clouds'),

                    unit: '%',

                    quality: 'Good'

                };

            } catch (error) {

                console.error('Error fetching Cloud data:', error);

                throw error;

            }

        }

        

        // Generate a mock value based on dataset

        function generateMockValue(dataset) {

            switch(dataset) {

                case 'temperature':

                    return (Math.random() * 40 - 10).toFixed(2); // -10 to 30°C

                case 'vegetation':

                    return (Math.random() * 0.8 + 0.2).toFixed(3); // 0.2 to 1.0

                case 'aerosol':

                    return (Math.random() * 1.0).toFixed(3); // 0 to 1.0

                case 'water_vapor':

                    return (Math.random() * 50).toFixed(2); // 0 to 50 g/kg

                case 'clouds':

                    return (Math.random() * 100).toFixed(1); // 0 to 100%

                default:

                    return (Math.random() * 100).toFixed(2);

            }

        }

        

        // Get unit for dataset

        function getUnitForDataset(dataset) {

            switch(dataset) {

                case 'temperature':

                    return '°C';

                case 'vegetation':

                    return 'NDVI';

                case 'aerosol':

                    return 'AOD';

                case 'water_vapor':

                    return 'g/kg';

                case 'clouds':

                    return '%';

                default:

                    return 'units';

            }

        }

        

        // Display query results for single location

        function displayQueryResult(data, date, location, lat, lon, dataset) {

            // Update result elements

            document.getElementById('resultTitle').textContent = 'Query Results';

            document.getElementById('resultDate').textContent = new Date(date).toLocaleDateString('en-US', { 

                year: 'numeric', 

                month: 'long', 

                day: 'numeric' 

            });

            document.getElementById('resultLocation').textContent = location;

            document.getElementById('resultCoords').textContent = `${lat.toFixed(4)}°, ${lon.toFixed(4)}°`;

            document.getElementById('resultDataset').textContent = formatDatasetName(dataset);

            document.getElementById('resultValue').textContent = data.value;

            document.getElementById('resultUnit').textContent = data.unit;

            document.getElementById('resultQuality').textContent = data.quality;

            

            // Update the data globe with the new data

            if (dataLayers[dataset]) {

                updateDataLayers(dataset, data.value);

            }

            

            // Update the data visualization bar

            updateDataVisualizationBar(dataset, data.value);

            

            // Show the result section

            document.getElementById('queryResult').classList.add('active');

            

            // Initialize the data globe if it hasn't been initialized yet

            if (!dataScene) {

                initDataGlobe();

            }

            

            // Scroll to results

            setTimeout(() => {

                document.getElementById('queryResult').scrollIntoView({ 

                    behavior: 'smooth', 

                    block: 'nearest' 

                });

            }, 100);

        }

        

        // Update the data visualization bar

        function updateDataVisualizationBar(dataset, value) {

            const visualizationBar = document.getElementById('dataVisualizationBar');

            const maxValue = document.getElementById('maxValue');

            const minValue = document.getElementById('minValue');

            

            // Update the gradient based on dataset type

            let gradientColors;

            switch(dataset) {

                case 'temperature':

                    gradientColors = 'linear-gradient(90deg, #0377ff, #ff0000)';

                    break;

                case 'vegetation':

                    gradientColors = 'linear-gradient(90deg, #8bc34a, #1b5e20)';

                    break;

                case 'water_vapor':

                    gradientColors = 'linear-gradient(90deg, #03a9f4, #01579b)';

                    break;

                case 'aerosol':

                    gradientColors = 'linear-gradient(90deg, #9e9e9e, #546e7a)';

                    break;

                case 'clouds':

                    gradientColors = 'linear-gradient(90deg, #ffffff, #e0e0e0)';

                    break;

                default:

                    gradientColors = 'linear-gradient(90deg, #4fc3f7, #29b6f6)';

            }

            

            visualizationBar.style.background = gradientColors;

            

            // Update extreme values

            const normalizedValue = normalizeValueForDataset(dataset, value);

            const maxVal = 100 * normalizedValue;

            const minVal = 100 * (1 - normalizedValue);

            

            maxValue.textContent = formatValueForDataset(dataset, value);

            minValue.textContent = formatValueForDataset(dataset, value, true);

            

            // Create pixel visualization

            createPixelVisualization(normalizedValue);

        }

        

        // Normalize value for dataset

        function normalizeValueForDataset(dataset, value) {

            switch(dataset) {

                case 'temperature':

                    // Normalize temperature (-10 to 30°C) to 0-1 range

                    return (parseFloat(value) + 10) / 40;

                case 'vegetation':

                    // NDVI is already in 0-1 range

                    return parseFloat(value);

                case 'water_vapor':

                    // Normalize water vapor (0-50 g/kg) to 0-1 range

                    return parseFloat(value) / 50;

                case 'aerosol':

                    // AOD is already in 0-1 range

                    return parseFloat(value);

                case 'clouds':

                    // Normalize clouds (0-100%) to 0-1 range

                    return parseFloat(value) / 100;

                default:

                    return 0.5;

            }

        }

        

        // Format value for display

        function formatValueForDataset(dataset, value, isLow = false) {

            switch(dataset) {

                case 'temperature':

                    return isLow ? `${parseFloat(value).toFixed(2)}°C` : `${parseFloat(value).toFixed(2)}°C`;

                case 'vegetation':

                    return isLow ? `${parseFloat(value).toFixed(3)}` : `${parseFloat(value).toFixed(3)}`;

                case 'water_vapor':

                    return isLow ? `${parseFloat(value).toFixed(2)} g/kg` : `${parseFloat(value).toFixed(2)} g/kg`;

                case 'aerosol':

                    return isLow ? `${parseFloat(value).toFixed(3)}` : `${parseFloat(value).toFixed(3)}`;

                case 'clouds':

                    return isLow ? `${parseFloat(value).toFixed(1)}%` : `${parseFloat(value).toFixed(1)}%`;

                default:

                    return value;

            }

        }

        

        // Format dataset name for display

        function formatDatasetName(dataset) {

            switch(dataset) {

                case 'temperature':

                    return 'Temperature';

                case 'vegetation':

                    return 'Vegetation Index';

                case 'aerosol':

                    return 'Aerosol Optical Depth';

                case 'water_vapor':

                    return 'Water Vapor';

                case 'clouds':

                    return 'Cloud Properties';

                default:

                    return dataset;

            }

        }

        

        // Create pixel visualization

        function createPixelVisualization(normalizedValue) {

            const pixelsContainer = document.getElementById('dataPixels');

            pixelsContainer.innerHTML = '';

            

            // Create 100 pixels in a 10x10 grid

            for (let i = 0; i < 100; i++) {

                const pixel = document.createElement('div');

                pixel.classList.add('data-pixel');

                

                // Calculate position in grid

                const row = Math.floor(i / 10);

                const col = i % 10;

                

                // Position pixel in grid

                pixel.style.position = 'absolute';

                pixel.style.left = `${col * 10}%`;

                pixel.style.top = `${row * 10}%`;

                

                // Color based on value (0-1 range)

                const hue = (1 - normalizedValue) * 240; // Red to blue

                const lightness = 0.3 + (1 - normalizedValue) * 0.7;

                pixel.style.backgroundColor = `hsl(${hue}, 70%, ${lightness * 100}%, 50%)`;

                

                pixelsContainer.appendChild(pixel);

            }

        }

        

        // Show error message

        function showError(message) {

            const errorElement = document.getElementById('errorMessage');

            errorElement.textContent = message;

            errorElement.classList.add('active');

        }

        

        // Hide error message

        function hideError() {

            const errorElement = document.getElementById('errorMessage');

            errorElement.classList.remove('active');

        }

        

        // Set default date to today

        document.addEventListener('DOMContentLoaded', function() {

            const today = new Date().toISOString().split('T')[0];

            document.getElementById('date').value = today;

            

            // Set max date to today

            document.getElementById('date').max = today;

            

            // Set min date to TerraForge launch date (1999-12-18)

            document.getElementById('date').min = '1999-12-18';

        });

    </script>

</body>

</html> make me a 6 slide ppt from this code



Since I cannot directly generate a PowerPoint file, I'll provide you with the content, design notes, and structure for a highly engaging, six-slide presentation based entirely on the provided web application code.

The presentation focuses on the website's purpose, design, and key features.

Presentation: Analyzing the "TerraForge" Web Application
Slide 1: Title & Overview
Section	Content	Design Notes
Title	TerraForge: 25 Years of Earth Science	Use the website's dark blue/space background (#0a0e27).
Subtitle	Analyzing the User Experience, Design, and Interactivity of a NASA Data Visualization Platform	Use a bright cyan/white font, mimicking the gradient text from the <H2> (#4fc3f7).
Visual		Include a high-quality screenshot of the hero section.
Key Takeaway	The application effectively combines a modern space aesthetic with complex scientific data.	Bold the website name: TerraForge.

Export to Sheets
Slide 2: Core Architecture & Technologies 🛠️
Section	Content	Design Notes
Title	Code Stack: Forging Data into Interaction	Use a simple, clean layout.
Frontend Technologies	1. HTML/CSS/JS: Base structure and theming. The dark-mode, futuristic theme uses deep blues and cyan accents. 2. Three.js: Powers the interactive 3D globes in both the Hero and Query result sections for rich visuals. 3. Chart.js: Used for the historical trend graphs in the Data Visualization section. 4. Leaflet.js: Integrates the Global Data Coverage Map in the Query section, including coordinate selection via marker clicks.	Use icons (like <i class="fas fa-code"></i>) next to each technology for visual appeal.
Data Simulation & API	Data loading simulates real-world interaction: The site attempts to pull historical climate data from public sources (e.g., NASA GISTEMP, NOAA CO 
2
​
 ) but relies on robust mock data fallbacks to guarantee functionality even when live APIs are restricted or fail.	Use bullet points for easy scanning. Highlight the challenge of handling real-world data constraints.

Export to Sheets
Slide 3: Interactive Home & Navigation ✨
Section	Content	Design Notes
Title	Hero Experience: A Celestial Gateway	Focus on the visual engagement and seamless user flow.
1. The 3D Globe (Three.js)	The focal point uses shaders and texture maps to create a realistic, rotatable Earth. It features automatic rotation, and the user can drag-rotate and scroll-zoom. The pulsing red .heat-overlay subtly conveys data urgency.	Use an inset box for the detailed globe explanation.
2. Sticky Instrument Bar	The five Terra instruments (ASTER, CERES, MISR, MODIS, MOPITT) are presented in a sticky, dedicated navigation bar that appears once the user scrolls down. This quickly informs the user of the satellite's capabilities.	Add a visual representation of the 5 instrument icons.
3. Scroll Interaction	The header applies a parallax effect (scrolled * 0.5) during scrolling, providing a sense of depth and movement, enhancing the space theme.	Emphasize the smooth transition and mobile responsiveness.

Export to Sheets
Slide 4: Data Visualization & Historical Trends 📊
Section	Content	Design Notes
Title	Visualizing 25 Years of Change	Focus on the trend analysis and data longevity.
Key Features	Users can seamlessly toggle between four critical global climate datasets: Temperature Anomaly, Atmospheric CO 
2
​
 , Arctic Ice Extent, and Vegetation Index (NDVI).	Use four distinct color-coded boxes/bullets matching the chart colors (Red/Orange, Green, Blue, Light Green) to match the in-app experience.
Data Storytelling	The interactive line charts clearly illustrate major global trends, such as rising temperatures and increasing CO 
2
​
  levels, providing longitudinal context since the satellite's 1999 launch.	Briefly explain how the data is parsed from the external CSV files in the JS before rendering in Chart.js.
Timeline Animation	The progress bar animates across the 1999-2024 timeline to visually convey the duration and continuity of the Terra mission's data collection.	Highlight the visual timeline at the bottom of the charts.

Export to Sheets
Slide 5: The Custom Data Query Tool 📍
Section	Content	Design Notes
Title	Localizing Data: The Query Tool	Focus on the direct, practical utility of the tool.
Data Input	The user can specify a Date, Dataset, and an Area Size, but the core functionality is driven by location: Users can enter Latitude/Longitude directly or click on the integrated Leaflet.js world map to automatically populate the coordinates.	Present the form inputs visually grouped.
Map Integration (Leaflet)	The dedicated Global Data Coverage Map allows users to visually select their query point, demonstrating real-time integration between the form and the map. A red marker highlights the selected coordinates.	Include a screenshot of the Leaflet map in the design.
Results & Visualization	Upon query submission, the results activate a customized visualization: A Data Value Bar uses color and position (calculated via normalizedValue) to show the queried data point's intensity relative to its typical range, alongside the raw metric and unit (e.g., 'NDVI', 'g/kg').	Emphasize the interactive bar and the 3D globe layer update (updateDataLayers).

Export to Sheets
Slide 6: Summary & Future Vision 🚀
Section	Content	Design Notes
Title	Conclusion: A Foundation for Further Exploration	This slide should be motivational.
Summary	The TerraForge application provides a dynamic, educational, and intuitive interface for understanding complex Earth Science data, leveraging modern web technologies (Three.js, Chart.js, Leaflet) to make NASA's mission accessible.	Recap the three main interactive features: 3D Globe, Trend Charts, and Custom Query.
Design Strength	Aesthetic Cohesion: The unified space theme, consistent color palette, and parallax scrolling create a strong, memorable brand experience. Data Accessibility: Complex data is distilled into digestible visual elements (line charts, color gradients, and a single value metric).	Use bold text to emphasize key strengths.
Call to Action	How can users take this further? Encourage engaging with the source data (NASA EOSDIS) and exploring the mission's real-world impacts (as detailed in the full site content).	Conclude with an open-ended statement or question to prompt discussion.
